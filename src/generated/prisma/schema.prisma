// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// RBAC Models
model Permission {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  description     String?
  category        String? // UI grouping category
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rolePermissions RolePermission[]
}

model Role {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  description     String?
  isSystem        Boolean          @default(false) // System roles cannot be deleted
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  users           User[]
  rolePermissions RolePermission[]
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

// User Model
model User {
  id                Int                @id @default(autoincrement())
  email             String             @unique
  password          String
  firstName         String
  lastName          String
  roleId            Int?
  role              Role?              @relation(fields: [roleId], references: [id])
  status            String             @default("ACTIVE") // ACTIVE, PENDING, SUSPENDED, INACTIVE
  phoneNumber       String?
  address           String?
  city              String?
  state             String?
  zipCode           String?
  country           String?
  profileImage      String?
  dateOfBirth       DateTime?
  gender            String?
  twoFactorEnabled  Boolean            @default(false)
  twoFactorSecret   String?
  provider          String? // For OAuth providers (google, facebook)
  providerId        String? // Provider-specific ID
  emailVerified     Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  passwordReset     PasswordReset?
  doctor            Doctor?
  patient           Patient?
  nurse             Nurse?
  invoices          Invoice[]
  payments          Payment[]
  biometricData     BiometricData?
  attendanceLogs    AttendanceLog[]
  dutyRosters       DutyRoster[]
  employee          Employee?
  housekeepingStaff HousekeepingStaff?
}

// Password Reset Model
model PasswordReset {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Doctor Model
model Doctor {
  id                 Int                @id @default(autoincrement())
  userId             Int                @unique
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialization     String
  qualification      String
  experience         Int                @default(0)
  licenseNumber      String             @unique
  consultationFee    Decimal            @default(0)
  availableDays      String? // JSON string of available days
  availableTimeStart String? // Format: HH:MM
  availableTimeEnd   String? // Format: HH:MM
  department         String?
  bio                String?
  isVerified         Boolean            @default(false)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  appointments       Appointment[]
  prescriptions      Prescription[]
  labReports         LabReport[]
  radiologyReports   RadiologyReport[]
  operationTheaters  OperationTheater[]
}

// Patient Model
model Patient {
  id                Int               @id @default(autoincrement())
  userId            Int               @unique
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  patientId         String            @unique // Custom patient ID format
  bloodGroup        String?
  height            Float?
  weight            Float?
  allergies         String?
  chronicDiseases   String?
  emergencyContact  String?
  emergencyName     String?
  emergencyRelation String?
  insuranceProvider String?
  insuranceId       String?
  tpaId             Int? // Third Party Administrator
  tpa               TPA?              @relation(fields: [tpaId], references: [id])
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  appointments      Appointment[]
  prescriptions     Prescription[]
  labReports        LabReport[]
  radiologyReports  RadiologyReport[]
  invoices          Invoice[]         @relation("InvoicePatientDetails")
  bedAllocations    BedAllocation[]
  vitalSigns        VitalSign[]
  patientSubsidies  PatientSubsidy[]
}

// Nurse Model
model Nurse {
  id             Int             @id @default(autoincrement())
  userId         Int             @unique
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  licenseNumber  String          @unique
  qualification  String
  experience     Int             @default(0)
  department     String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  vitalSigns     VitalSign[]
  bedAllocations BedAllocation[]
}

// Appointment Model
model Appointment {
  id               Int               @id @default(autoincrement())
  patientId        Int
  patient          Patient           @relation(fields: [patientId], references: [id])
  doctorId         Int
  doctor           Doctor            @relation(fields: [doctorId], references: [id])
  appointmentDate  DateTime
  startTime        String // Format: HH:MM
  endTime          String // Format: HH:MM
  status           String            @default("SCHEDULED") // SCHEDULED, COMPLETED, CANCELLED, NO_SHOW
  reason           String?
  notes            String?
  followUp         Boolean           @default(false)
  followUpDate     DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  prescriptions    Prescription[]
  labReports       LabReport[]
  radiologyReports RadiologyReport[]
}

// Prescription Model
model Prescription {
  id               Int                    @id @default(autoincrement())
  patientId        Int
  patient          Patient                @relation(fields: [patientId], references: [id])
  doctorId         Int
  doctor           Doctor                 @relation(fields: [doctorId], references: [id])
  appointmentId    Int?
  appointment      Appointment?           @relation(fields: [appointmentId], references: [id])
  prescriptionDate DateTime               @default(now())
  diagnosis        String
  notes            String?
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  medicines        PrescriptionMedicine[]
}

// Prescription Medicine Model
model PrescriptionMedicine {
  id             Int          @id @default(autoincrement())
  prescriptionId Int
  prescription   Prescription @relation(fields: [prescriptionId], references: [id], onDelete: Cascade)
  medicineId     Int
  medicine       Medicine     @relation(fields: [medicineId], references: [id])
  dosage         String
  frequency      String
  duration       String
  instructions   String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

// Medicine Model
model Medicine {
  id                    Int                    @id @default(autoincrement())
  name                  String
  genericName           String?
  category              String?
  manufacturer          String?
  description           String?
  dosageForm            String? // Tablet, Capsule, Syrup, etc.
  strength              String?
  price                 Decimal                @default(0)
  stock                 Int                    @default(0)
  reorderLevel          Int                    @default(10)
  expiryDate            DateTime?
  batchNumber           String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  prescriptionMedicines PrescriptionMedicine[]
  inventoryLogs         InventoryLog[]
}

// Inventory Log Model
model InventoryLog {
  id          Int      @id @default(autoincrement())
  medicineId  Int
  medicine    Medicine @relation(fields: [medicineId], references: [id])
  quantity    Int
  type        String // IN, OUT
  reason      String?
  referenceId String? // For tracking purposes (e.g., invoice number)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Lab Report Model
model LabReport {
  id            Int           @id @default(autoincrement())
  patientId     Int
  patient       Patient       @relation(fields: [patientId], references: [id])
  doctorId      Int
  doctor        Doctor        @relation(fields: [doctorId], references: [id])
  appointmentId Int?
  appointment   Appointment?  @relation(fields: [appointmentId], references: [id])
  testDate      DateTime      @default(now())
  reportDate    DateTime?
  testType      String
  testResult    String?
  normalRange   String?
  notes         String?
  attachmentUrl String?
  status        String        @default("PENDING") // PENDING, COMPLETED, CANCELLED
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  invoiceItems  InvoiceItem[] @relation("LabReportInvoiceItem")
}

// Radiology Report Model
model RadiologyReport {
  id            Int           @id @default(autoincrement())
  patientId     Int
  patient       Patient       @relation(fields: [patientId], references: [id])
  doctorId      Int
  doctor        Doctor        @relation(fields: [doctorId], references: [id])
  appointmentId Int?
  appointment   Appointment?  @relation(fields: [appointmentId], references: [id])
  testDate      DateTime      @default(now())
  reportDate    DateTime?
  testType      String
  findings      String?
  impression    String?
  notes         String?
  attachmentUrl String?
  status        String        @default("PENDING") // PENDING, COMPLETED, CANCELLED
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  invoiceItems  InvoiceItem[] @relation("RadiologyReportInvoiceItem")
}

// Invoice Model
model Invoice {
  id             Int            @id @default(autoincrement())
  patientId      Int
  patient        User           @relation(fields: [patientId], references: [id], map: "Invoice_userId_fkey")
  patientDetails Patient        @relation("InvoicePatientDetails", fields: [patientId], references: [id], map: "Invoice_patientDetails_fkey")
  invoiceNumber  String         @unique
  invoiceDate    DateTime       @default(now())
  dueDate        DateTime
  totalAmount    Decimal        @default(0)
  discountAmount Decimal        @default(0)
  taxAmount      Decimal        @default(0)
  netAmount      Decimal        @default(0)
  status         String         @default("UNPAID") // UNPAID, PARTIALLY_PAID, PAID, CANCELLED
  notes          String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  invoiceItems   InvoiceItem[]
  payments       Payment[]
  subsidyClaims  SubsidyClaim[]
}

// Invoice Item Model
model InvoiceItem {
  id                Int              @id @default(autoincrement())
  invoiceId         Int
  invoice           Invoice          @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  itemType          String // CONSULTATION, LAB_TEST, RADIOLOGY, MEDICINE, PROCEDURE, OTHER
  itemId            Int? // Reference to the specific item (e.g., lab test ID)
  description       String
  quantity          Int              @default(1)
  unitPrice         Decimal
  totalPrice        Decimal
  labReportId       Int?
  labReport         LabReport?       @relation("LabReportInvoiceItem", fields: [labReportId], references: [id])
  radiologyReportId Int?
  radiologyReport   RadiologyReport? @relation("RadiologyReportInvoiceItem", fields: [radiologyReportId], references: [id])
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

// Payment Model
model Payment {
  id            Int      @id @default(autoincrement())
  invoiceId     Int
  invoice       Invoice  @relation(fields: [invoiceId], references: [id])
  patientId     Int
  patient       User     @relation(fields: [patientId], references: [id])
  paymentDate   DateTime @default(now())
  amount        Decimal
  paymentMethod String // CASH, CREDIT_CARD, DEBIT_CARD, BANK_TRANSFER, INSURANCE
  transactionId String?
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Bed Model
model Bed {
  id             Int             @id @default(autoincrement())
  bedNumber      String          @unique
  wardId         Int
  ward           Ward            @relation(fields: [wardId], references: [id])
  status         String          @default("AVAILABLE") // AVAILABLE, OCCUPIED, MAINTENANCE
  price          Decimal         @default(0)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  bedAllocations BedAllocation[]
}

// Ward Model
model Ward {
  id        Int      @id @default(autoincrement())
  name      String
  wardType  String // GENERAL, PRIVATE, SEMI_PRIVATE, ICU, CCU, EMERGENCY
  floor     String?
  capacity  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  beds      Bed[]
}

// Bed Allocation Model
model BedAllocation {
  id           Int       @id @default(autoincrement())
  bedId        Int
  bed          Bed       @relation(fields: [bedId], references: [id])
  patientId    Int
  patient      Patient   @relation(fields: [patientId], references: [id])
  nurseId      Int?
  nurse        Nurse?    @relation(fields: [nurseId], references: [id])
  allocatedAt  DateTime  @default(now())
  dischargedAt DateTime?
  status       String    @default("ALLOCATED") // ALLOCATED, DISCHARGED
  notes        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

// Vital Sign Model
model VitalSign {
  id                     Int      @id @default(autoincrement())
  patientId              Int
  patient                Patient  @relation(fields: [patientId], references: [id])
  recordedBy             Int
  nurse                  Nurse    @relation(fields: [recordedBy], references: [id])
  temperature            Float?
  bloodPressureSystolic  Int?
  bloodPressureDiastolic Int?
  heartRate              Int?
  respiratoryRate        Int?
  oxygenSaturation       Float?
  height                 Float?
  weight                 Float?
  notes                  String?
  recordedAt             DateTime @default(now())
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

// Operation Theater Model
model OperationTheater {
  id         Int                         @id @default(autoincrement())
  name       String
  location   String?
  status     String                      @default("AVAILABLE") // AVAILABLE, OCCUPIED, MAINTENANCE
  doctorId   Int?
  doctor     Doctor?                     @relation(fields: [doctorId], references: [id])
  createdAt  DateTime                    @default(now())
  updatedAt  DateTime                    @updatedAt
  surgeries  Surgery[]
  equipments OperationTheaterEquipment[]
}

// Surgery Model
model Surgery {
  id                 Int              @id @default(autoincrement())
  patientId          Int
  operationTheaterId Int
  operationTheater   OperationTheater @relation(fields: [operationTheaterId], references: [id])
  surgeryDate        DateTime
  startTime          String // Format: HH:MM
  endTime            String // Format: HH:MM
  surgeryType        String
  notes              String?
  status             String           @default("SCHEDULED") // SCHEDULED, COMPLETED, CANCELLED
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

// Operation Theater Equipment Model
model OperationTheaterEquipment {
  id                  Int              @id @default(autoincrement())
  operationTheaterId  Int
  operationTheater    OperationTheater @relation(fields: [operationTheaterId], references: [id])
  name                String
  serialNumber        String?
  manufacturer        String?
  purchaseDate        DateTime?
  lastMaintenanceDate DateTime?
  nextMaintenanceDate DateTime?
  status              String           @default("OPERATIONAL") // OPERATIONAL, MAINTENANCE, FAULTY
  notes               String?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
}

// Medical Gas Cylinder Model
model MedicalGasCylinder {
  id             Int       @id @default(autoincrement())
  cylinderNumber String    @unique
  gasType        String // OXYGEN, NITROUS_OXIDE, CARBON_DIOXIDE, NITROGEN, MEDICAL_AIR
  capacity       Float
  currentLevel   Float
  location       String?
  status         String    @default("AVAILABLE") // AVAILABLE, IN_USE, EMPTY, MAINTENANCE
  lastRefillDate DateTime?
  nextRefillDate DateTime?
  notes          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

// Equipment Maintenance Model
model EquipmentMaintenance {
  id              Int      @id @default(autoincrement())
  equipmentType   String // OPERATION_THEATER, MEDICAL_GAS, LAB_EQUIPMENT, OTHER
  equipmentId     Int
  maintenanceDate DateTime
  maintenanceType String // PREVENTIVE, CORRECTIVE, CALIBRATION
  performedBy     String
  cost            Decimal  @default(0)
  notes           String?
  status          String   @default("SCHEDULED") // SCHEDULED, COMPLETED, CANCELLED
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Ambulance Model
model Ambulance {
  id                  Int                @id @default(autoincrement())
  vehicleNumber       String             @unique
  model               String?
  type                String // BASIC, ADVANCED, MOBILE_ICU
  capacity            Int                @default(1)
  driverName          String?
  driverContact       String?
  status              String             @default("AVAILABLE") // AVAILABLE, ON_DUTY, MAINTENANCE
  lastMaintenanceDate DateTime?
  nextMaintenanceDate DateTime?
  notes               String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  ambulanceServices   AmbulanceService[]
}

// Ambulance Service Model
model AmbulanceService {
  id             Int       @id @default(autoincrement())
  ambulanceId    Int
  ambulance      Ambulance @relation(fields: [ambulanceId], references: [id])
  patientName    String
  patientContact String
  pickupLocation String
  dropLocation   String
  serviceDate    DateTime
  status         String    @default("SCHEDULED") // SCHEDULED, IN_PROGRESS, COMPLETED, CANCELLED
  fare           Decimal   @default(0)
  notes          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

// Biometric Data Model
model BiometricData {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  biometricId String   @unique // ID from ZKTeco device
  fingerprint String? // Encrypted fingerprint data
  faceData    String? // Encrypted face recognition data
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Attendance Log Model
model AttendanceLog {
  id               Int       @id @default(autoincrement())
  userId           Int
  user             User      @relation(fields: [userId], references: [id])
  checkInTime      DateTime?
  checkOutTime     DateTime?
  status           String // PRESENT, ABSENT, LATE, HALF_DAY
  deviceId         String? // ZKTeco device ID
  verificationMode String? // FINGERPRINT, FACE, PASSWORD, CARD
  notes            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

// Duty Roster Model
model DutyRoster {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  startDate  DateTime
  endDate    DateTime
  shiftStart String // Format: HH:MM
  shiftEnd   String // Format: HH:MM
  department String?
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// TPA (Third Party Administrator) Model
model TPA {
  id                Int       @id @default(autoincrement())
  name              String
  contactPerson     String?
  contactNumber     String?
  email             String?
  address           String?
  contractStartDate DateTime?
  contractEndDate   DateTime?
  status            String    @default("ACTIVE") // ACTIVE, INACTIVE
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  patients          Patient[]
}

// Human Resource Module Models

// Employee Model (extends User)
model Employee {
  id                 Int                 @id @default(autoincrement())
  userId             Int                 @unique
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  employeeId         String              @unique // Custom employee ID format
  department         String
  position           String
  joiningDate        DateTime
  contractType       String // PERMANENT, CONTRACT, PROBATION
  contractEndDate    DateTime?
  salary             Decimal             @default(0)
  bankName           String?
  accountNumber      String?
  ifscCode           String? // For Indian bank transfers
  panNumber          String? // For Indian tax identification
  emergencyContact   String?
  emergencyName      String?
  emergencyRelation  String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  leaves             Leave[]
  salaryPayments     SalaryPayment[]
  documents          EmployeeDocument[]
  performanceReviews PerformanceReview[]
}

// Leave Model
model Leave {
  id         Int       @id @default(autoincrement())
  employeeId Int
  employee   Employee  @relation(fields: [employeeId], references: [id])
  leaveType  String // CASUAL, SICK, EARNED, MATERNITY, PATERNITY, UNPAID
  startDate  DateTime
  endDate    DateTime
  totalDays  Int
  reason     String?
  status     String    @default("PENDING") // PENDING, APPROVED, REJECTED, CANCELLED
  approvedBy Int?
  approvedAt DateTime?
  notes      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

// Salary Payment Model
model SalaryPayment {
  id            Int      @id @default(autoincrement())
  employeeId    Int
  employee      Employee @relation(fields: [employeeId], references: [id])
  paymentDate   DateTime
  salaryMonth   String // Format: YYYY-MM
  basicSalary   Decimal
  allowances    Decimal  @default(0)
  deductions    Decimal  @default(0)
  taxDeducted   Decimal  @default(0)
  netSalary     Decimal
  paymentMethod String // BANK_TRANSFER, CASH, CHECK
  transactionId String?
  status        String   @default("PENDING") // PENDING, PAID, FAILED
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Employee Document Model
model EmployeeDocument {
  id           Int       @id @default(autoincrement())
  employeeId   Int
  employee     Employee  @relation(fields: [employeeId], references: [id])
  documentType String // RESUME, ID_PROOF, ADDRESS_PROOF, QUALIFICATION, EXPERIENCE, OTHER
  documentName String
  documentUrl  String
  isVerified   Boolean   @default(false)
  verifiedBy   Int?
  verifiedAt   DateTime?
  notes        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

// Performance Review Model
model PerformanceReview {
  id                 Int       @id @default(autoincrement())
  employeeId         Int
  employee           Employee  @relation(fields: [employeeId], references: [id])
  reviewDate         DateTime
  reviewPeriodStart  DateTime
  reviewPeriodEnd    DateTime
  reviewedBy         Int
  rating             Int // 1-5 scale
  strengths          String?
  areasOfImprovement String?
  goals              String?
  comments           String?
  employeeComments   String?
  status             String    @default("DRAFT") // DRAFT, SUBMITTED, ACKNOWLEDGED
  acknowledgedAt     DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

// Government Subsidy Scheme Models

// Subsidy Scheme Model
model SubsidyScheme {
  id                      Int              @id @default(autoincrement())
  name                    String
  code                    String           @unique
  description             String?
  issuingAuthority        String // Government department/ministry
  startDate               DateTime
  endDate                 DateTime?
  eligibilityCriteria     String? // JSON string of eligibility rules
  subsidyType             String // PERCENTAGE, FIXED_AMOUNT, HYBRID
  percentageValue         Float? // For percentage-based subsidies
  fixedAmount             Decimal? // For fixed amount subsidies
  maxCoverageAmount       Decimal? // Maximum coverage limit per patient
  maxCoveragePerTreatment Decimal? // Maximum coverage limit per treatment
  applicableServices      String? // JSON string of applicable services
  documentationRequired   String? // Required documents for claiming
  status                  String           @default("ACTIVE") // ACTIVE, INACTIVE, EXPIRED
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  patientSubsidies        PatientSubsidy[]
  subsidyClaims           SubsidyClaim[]
}

// Patient Subsidy Model
model PatientSubsidy {
  id                 Int            @id @default(autoincrement())
  patientId          Int
  patient            Patient        @relation(fields: [patientId], references: [id])
  schemeId           Int
  scheme             SubsidyScheme  @relation(fields: [schemeId], references: [id])
  enrollmentDate     DateTime
  enrollmentNumber   String         @unique
  cardNumber         String?
  validFrom          DateTime
  validUntil         DateTime?
  remainingBalance   Decimal? // For schemes with balance tracking
  status             String         @default("ACTIVE") // ACTIVE, INACTIVE, EXPIRED
  verificationStatus String         @default("PENDING") // PENDING, VERIFIED, REJECTED
  verifiedBy         Int?
  verifiedAt         DateTime?
  notes              String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  subsidyClaims      SubsidyClaim[]
}

// Subsidy Claim Model
model SubsidyClaim {
  id                Int            @id @default(autoincrement())
  patientSubsidyId  Int
  patientSubsidy    PatientSubsidy @relation(fields: [patientSubsidyId], references: [id])
  schemeId          Int
  scheme            SubsidyScheme  @relation(fields: [schemeId], references: [id])
  invoiceId         Int?
  invoice           Invoice?       @relation(fields: [invoiceId], references: [id])
  claimDate         DateTime       @default(now())
  claimAmount       Decimal
  approvedAmount    Decimal?
  rejectionReason   String?
  claimStatus       String         @default("SUBMITTED") // SUBMITTED, PROCESSING, APPROVED, PARTIALLY_APPROVED, REJECTED
  processedBy       Int?
  processedAt       DateTime?
  reimbursementDate DateTime?
  transactionId     String?
  notes             String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

// Housekeeping Management Models

// Housekeeping Area Model
model HousekeepingArea {
  id                  Int            @id @default(autoincrement())
  name                String
  description         String?
  floor               String?
  buildingSection     String?
  priority            String         @default("MEDIUM") // HIGH, MEDIUM, LOW
  cleaningFrequency   String // DAILY, TWICE_DAILY, WEEKLY, MONTHLY
  specialInstructions String?
  status              String         @default("ACTIVE") // ACTIVE, INACTIVE
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  cleaningTasks       CleaningTask[]
}

// Housekeeping Staff Model
model HousekeepingStaff {
  id                    Int                     @id @default(autoincrement())
  userId                Int                     @unique
  user                  User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  staffId               String                  @unique
  supervisor            Boolean                 @default(false)
  specializedAreas      String? // JSON string of specialized cleaning areas
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  cleaningTasks         CleaningTask[]
  cleaningVerifications CleaningVerification[]
  supplyRequests        CleaningSupplyRequest[]
}

// Cleaning Task Model
model CleaningTask {
  id                Int                    @id @default(autoincrement())
  areaId            Int
  area              HousekeepingArea       @relation(fields: [areaId], references: [id])
  assignedToId      Int?
  assignedTo        HousekeepingStaff?     @relation(fields: [assignedToId], references: [id])
  scheduledDate     DateTime
  scheduledTime     String // Format: HH:MM
  estimatedDuration Int // In minutes
  priority          String                 @default("MEDIUM") // HIGH, MEDIUM, LOW
  status            String                 @default("SCHEDULED") // SCHEDULED, IN_PROGRESS, COMPLETED, CANCELLED
  startedAt         DateTime?
  completedAt       DateTime?
  notes             String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  verifications     CleaningVerification[]
}

// Cleaning Verification Model
model CleaningVerification {
  id               Int               @id @default(autoincrement())
  taskId           Int
  task             CleaningTask      @relation(fields: [taskId], references: [id])
  verifiedById     Int
  verifiedBy       HousekeepingStaff @relation(fields: [verifiedById], references: [id])
  verificationDate DateTime          @default(now())
  rating           Int // 1-5 scale
  cleanliness      Int // 1-5 scale
  comments         String?
  photosUrl        String? // JSON array of photo URLs
  status           String            @default("PASSED") // PASSED, FAILED
  followUpRequired Boolean           @default(false)
  followUpNotes    String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

// Cleaning Supply Model
model CleaningSupply {
  id                Int                         @id @default(autoincrement())
  name              String
  description       String?
  unit              String // BOTTLE, BOX, PACKET, PIECE, LITER
  currentStock      Int                         @default(0)
  reorderLevel      Int                         @default(10)
  location          String?
  supplier          String?
  lastPurchaseDate  DateTime?
  lastPurchasePrice Decimal?
  status            String                      @default("AVAILABLE") // AVAILABLE, LOW_STOCK, OUT_OF_STOCK
  createdAt         DateTime                    @default(now())
  updatedAt         DateTime                    @updatedAt
  supplyRequests    CleaningSupplyRequestItem[]
}

// Cleaning Supply Request Model
model CleaningSupplyRequest {
  id            Int                         @id @default(autoincrement())
  requestedById Int
  requestedBy   HousekeepingStaff           @relation(fields: [requestedById], references: [id])
  requestDate   DateTime                    @default(now())
  requiredBy    DateTime
  status        String                      @default("PENDING") // PENDING, APPROVED, PARTIALLY_APPROVED, REJECTED, FULFILLED
  approvedById  Int?
  approvedAt    DateTime?
  fulfilledAt   DateTime?
  notes         String?
  createdAt     DateTime                    @default(now())
  updatedAt     DateTime                    @updatedAt
  requestItems  CleaningSupplyRequestItem[]
}

// Cleaning Supply Request Item Model
model CleaningSupplyRequestItem {
  id                Int                   @id @default(autoincrement())
  requestId         Int
  request           CleaningSupplyRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  supplyId          Int
  supply            CleaningSupply        @relation(fields: [supplyId], references: [id])
  quantityRequested Int
  quantityApproved  Int?
  quantityFulfilled Int?
  notes             String?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
}
