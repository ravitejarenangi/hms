// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// RBAC Models
model Permission {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  description     String?
  category        String?           // UI grouping category
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  rolePermissions RolePermission[]
}

model Role {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  description     String?
  isSystem        Boolean           @default(false) // System roles cannot be deleted
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  users           User[]
  rolePermissions RolePermission[]
}

model RolePermission {
  id              Int               @id @default(autoincrement())
  roleId          Int
  permissionId    Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  role            Role              @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission      Permission        @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

// User Model
model User {
  id                Int             @id @default(autoincrement())
  email             String          @unique
  password          String
  firstName         String
  lastName          String
  roleId            Int?
  role              Role?           @relation(fields: [roleId], references: [id])
  status            String          @default("ACTIVE") // ACTIVE, PENDING, SUSPENDED, INACTIVE
  phoneNumber       String?
  address           String?
  city              String?
  state             String?
  zipCode           String?
  country           String?
  profileImage      String?
  dateOfBirth       DateTime?
  gender            String?
  twoFactorEnabled  Boolean         @default(false)
  twoFactorSecret   String?
  provider          String?         // For OAuth providers (google, facebook)
  providerId        String?         // Provider-specific ID
  emailVerified     Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  passwordReset     PasswordReset?
}

// Password Reset Model
model PasswordReset {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
