// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core user model
model User {
  id                String          @id @default(cuid())
  name              String
  email             String          @unique
  password          String?         // Nullable for OAuth-only users
  phone             String?
  status            String          @default("active") // active, inactive, suspended
  emailVerified     DateTime?       // For email verification
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  // Relations
  roles             UserRole[]
  profile           Profile?
  accounts          Account[]       // OAuth accounts
  sessions          Session[]       // User sessions
  twoFactorAuth     TwoFactorAuth?  // 2FA settings
  passwordResets    PasswordReset[] // Password reset tokens
}

// User profile with additional information
model Profile {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  address       String?
  city          String?
  state         String?
  country       String?
  postalCode    String?
  bio           String?
  avatar        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Role model for RBAC
model Role {
  id            String    @id @default(cuid())
  name          String    @unique
  description   String?
  permissions   Json?     // Stored as JSON array of permission strings
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  users         UserRole[]
}

// Junction table for many-to-many User-Role relationship
model UserRole {
  id            String    @id @default(cuid())
  userId        String
  roleId        String
  assignedAt    DateTime  @default(now())
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  role          Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  @@unique([userId, roleId])
}

// OAuth account model
model Account {
  id                String    @id @default(cuid())
  userId            String
  provider          String    // google, facebook, etc.
  providerAccountId String    // ID from the provider
  refreshToken      String?   
  accessToken       String?   
  expiresAt         Int?      // Token expiration timestamp
  tokenType         String?   
  scope             String?   
  idToken           String?   
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

// Session model for managing user sessions
model Session {
  id            String    @id @default(cuid())
  userId        String
  expires       DateTime
  sessionToken  String    @unique
  accessToken   String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Two-factor authentication model
model TwoFactorAuth {
  id            String    @id @default(cuid())
  userId        String    @unique
  secret        String    // TOTP secret
  enabled       Boolean   @default(false)
  backupCodes   String[]  // Backup codes for recovery
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Password reset token model
model PasswordReset {
  id            String    @id @default(cuid())
  userId        String
  token         String    @unique
  expires       DateTime
  createdAt     DateTime  @default(now())
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Permission model for granular access control
model Permission {
  id            String    @id @default(cuid())
  name          String    @unique
  description   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}
