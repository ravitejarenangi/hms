generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id
  userId            String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime
  User              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Allergy {
  id          String    @id
  patientId   String
  allergen    String
  reaction    String
  severity    String
  diagnosedAt DateTime?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  Patient     Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model Ambulance {
  id                         String                       @id
  registrationNumber         String                       @unique
  vehicleModel               String
  vehicleType                AmbulanceType
  manufacturingYear          Int
  capacity                   Int
  features                   String[]
  status                     AmbulanceStatus              @default(AVAILABLE)
  lastMaintenance            DateTime?
  nextMaintenance            DateTime?
  purchaseDate               DateTime
  insuranceExpiry            DateTime
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime
  AmbulanceDispatch          AmbulanceDispatch[]
  AmbulanceDriver            AmbulanceDriver[]
  AmbulanceEquipment         AmbulanceEquipment[]
  AmbulanceMaintenanceRecord AmbulanceMaintenanceRecord[]
}

model AmbulanceBilling {
  id                    String            @id
  dispatchId            String            @unique
  baseCharge            Decimal
  distanceCharge        Decimal
  waitingCharge         Decimal?
  equipmentCharge       Decimal?
  totalAmount           Decimal
  insuranceCovered      Boolean           @default(false)
  insuranceProvider     String?
  insurancePolicyNumber String?
  paymentStatus         PaymentStatus     @default(PENDING)
  invoiceNumber         String?           @unique
  notes                 String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime
  AmbulanceDispatch     AmbulanceDispatch @relation(fields: [dispatchId], references: [id])
}

model AmbulanceDispatch {
  id               String            @id
  ambulanceId      String
  driverId         String
  patientId        String?
  requestedBy      String
  requestedAt      DateTime          @default(now())
  dispatchedAt     DateTime?
  arrivedAt        DateTime?
  completedAt      DateTime?
  pickupLocation   String
  dropLocation     String
  purpose          String
  priority         DispatchPriority  @default(NORMAL)
  status           DispatchStatus    @default(REQUESTED)
  notes            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime
  AmbulanceBilling AmbulanceBilling?
  Ambulance        Ambulance         @relation(fields: [ambulanceId], references: [id])
  AmbulanceDriver  AmbulanceDriver   @relation(fields: [driverId], references: [id])
  PatientVital     PatientVital[]
}

model AmbulanceDriver {
  id                String              @id
  ambulanceId       String
  driverId          String
  licenseNumber     String
  licenseExpiry     DateTime
  isAvailable       Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  AmbulanceDispatch AmbulanceDispatch[]
  Ambulance         Ambulance           @relation(fields: [ambulanceId], references: [id])
}

model AmbulanceEquipment {
  id             String          @id
  ambulanceId    String
  name           String
  serialNumber   String?
  expiryDate     DateTime?
  lastInspection DateTime?
  status         EquipmentStatus @default(AVAILABLE)
  notes          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime
  Ambulance      Ambulance       @relation(fields: [ambulanceId], references: [id])
}

model AmbulanceMaintenanceRecord {
  id                 String          @id
  ambulanceId        String
  maintenanceType    MaintenanceType
  description        String
  performedBy        String
  performedAt        DateTime
  cost               Decimal?
  odometer           Int?
  nextMaintenanceDue DateTime?
  notes              String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime
  Ambulance          Ambulance       @relation(fields: [ambulanceId], references: [id])
}

model Appointment {
  id                  String                @id
  patientId           String
  doctorId            String
  departmentId        String?
  appointmentTypeId   String
  title               String
  description         String?
  startTime           DateTime
  endTime             DateTime
  duration            Int
  status              AppointmentStatus     @default(SCHEDULED)
  isRecurring         Boolean               @default(false)
  recurringPatternId  String?
  location            String?
  notes               String?
  createdBy           String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  cancelledAt         DateTime?
  cancelReason        String?
  reminderSent        Boolean               @default(false)
  confirmationStatus  ConfirmationStatus    @default(PENDING)
  confirmationTime    DateTime?
  checkInTime         DateTime?
  checkOutTime        DateTime?
  noShow              Boolean               @default(false)
  followUpNeeded      Boolean               @default(false)
  followUpNotes       String?
  AppointmentType     AppointmentType       @relation(fields: [appointmentTypeId], references: [id])
  User                User                  @relation(fields: [patientId], references: [id])
  RecurringPattern    RecurringPattern?     @relation(fields: [recurringPatternId], references: [id])
  AppointmentNote     AppointmentNote[]
  AppointmentReminder AppointmentReminder[]
  WaitingList         WaitingList?
}

model AppointmentCategory {
  id              String            @id
  name            String
  description     String?
  departmentId    String?
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  AppointmentType AppointmentType[]
}

model AppointmentNote {
  id            String      @id
  appointmentId String
  note          String
  createdBy     String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  Appointment   Appointment @relation(fields: [appointmentId], references: [id])
}

model AppointmentReminder {
  id            String          @id
  appointmentId String
  reminderType  ReminderType
  scheduledTime DateTime
  sentTime      DateTime?
  status        ReminderStatus  @default(PENDING)
  channel       ReminderChannel
  content       String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  Appointment   Appointment     @relation(fields: [appointmentId], references: [id])
}

model AppointmentType {
  id                  String              @id
  name                String
  description         String?
  color               String
  duration            Int
  bufferTime          Int                 @default(0)
  categoryId          String
  isActive            Boolean             @default(true)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime
  Appointment         Appointment[]
  AppointmentCategory AppointmentCategory @relation(fields: [categoryId], references: [id])
}

model AttendanceRecord {
  id                    String           @id
  userId                String
  shiftAssignmentId     String
  date                  DateTime
  checkInTime           DateTime?
  checkOutTime          DateTime?
  status                AttendanceStatus @default(PRESENT)
  lateMinutes           Int?
  earlyDepartureMinutes Int?
  overtimeMinutes       Int?
  notes                 String?
  createdAt             DateTime         @default(now())
  updatedAt             DateTime
  ShiftAssignment       ShiftAssignment  @relation(fields: [shiftAssignmentId], references: [id])
}

model AuthorizationDocument {
  id                 String           @id
  preAuthorizationId String
  title              String
  description        String?
  fileType           String
  filePath           String
  uploadedBy         String
  uploadedAt         DateTime         @default(now())
  createdAt          DateTime         @default(now())
  updatedAt          DateTime
  PreAuthorization   PreAuthorization @relation(fields: [preAuthorizationId], references: [id])
}

model BeneficiaryDocument {
  id                String            @id
  beneficiaryId     String
  documentType      String
  title             String
  description       String?
  filePath          String
  fileType          String
  isVerified        Boolean           @default(false)
  verifiedBy        String?
  verifiedAt        DateTime?
  expiryDate        DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime
  SchemeBeneficiary SchemeBeneficiary @relation(fields: [beneficiaryId], references: [id])
}

model BiometricDevice {
  id                  String                @id
  deviceId            String                @unique
  name                String
  type                DeviceType
  location            String
  ipAddress           String?
  port                Int?
  apiKey              String?
  status              DeviceStatus          @default(ACTIVE)
  lastSyncTime        DateTime?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  BiometricLog        BiometricLog[]
  DeviceConfiguration DeviceConfiguration[]
}

model BiometricLog {
  id                    String                 @id
  deviceId              String
  userId                String?
  logType               LogType
  timestamp             DateTime               @default(now())
  direction             Direction?
  verificationMethod    VerificationMethod
  confidenceScore       Float?
  status                VerificationStatus
  ipAddress             String?
  notes                 String?
  createdAt             DateTime               @default(now())
  BiometricDevice       BiometricDevice        @relation(fields: [deviceId], references: [id])
  BiometricVerification BiometricVerification?
}

model BiometricTemplate {
  id                    String                  @id
  userId                String
  templateType          TemplateType
  templateData          Bytes
  quality               Int?
  enrolledAt            DateTime                @default(now())
  enrolledBy            String
  status                TemplateStatus          @default(ACTIVE)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  BiometricVerification BiometricVerification[]
}

model BiometricVerification {
  id                String            @id
  logId             String            @unique
  templateId        String
  confidenceScore   Float
  threshold         Float
  matched           Boolean
  verifiedAt        DateTime          @default(now())
  createdAt         DateTime          @default(now())
  BiometricLog      BiometricLog      @relation(fields: [logId], references: [id])
  BiometricTemplate BiometricTemplate @relation(fields: [templateId], references: [id])
}

model BudgetAllocation {
  id              String        @id
  budgetId        String
  schemeId        String
  allocatedAmount Decimal
  utilizedAmount  Decimal       @default(0)
  remainingAmount Decimal
  allocationDate  DateTime      @default(now())
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime
  SubsidyBudget   SubsidyBudget @relation(fields: [budgetId], references: [id])
}

model ChartOfAccount {
  id                   String             @id
  accountCode          String             @unique
  accountName          String
  accountType          AccountType
  parentAccountId      String?
  description          String?
  isActive             Boolean            @default(true)
  departmentId         String?
  openingBalance       Decimal            @default(0) @db.Decimal(15, 2)
  currentBalance       Decimal            @default(0) @db.Decimal(15, 2)
  createdBy            String
  updatedBy            String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime
  ChartOfAccount       ChartOfAccount?    @relation("ChartOfAccountToChartOfAccount", fields: [parentAccountId], references: [id])
  other_ChartOfAccount ChartOfAccount[]   @relation("ChartOfAccountToChartOfAccount")
  JournalEntryItem     JournalEntryItem[]
}

model ClaimDocument {
  id             String         @id
  claimId        String
  title          String
  description    String?
  fileType       String
  filePath       String
  uploadedBy     String
  uploadedAt     DateTime       @default(now())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime
  InsuranceClaim InsuranceClaim @relation(fields: [claimId], references: [id])
}

model ClaimPayment {
  id            String   @id
  claimId       String
  amount        Decimal
  paymentDate   DateTime
  paymentMethod String
  transactionId String?
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  TPAClaim      TPAClaim @relation(fields: [claimId], references: [id])
}

model CleaningChecklist {
  id              String       @id
  taskId          String       @unique
  items           Json
  completedBy     String?
  completedAt     DateTime?
  supervisorCheck Boolean      @default(false)
  supervisorId    String?
  supervisorNotes String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime
  CleaningTask    CleaningTask @relation(fields: [taskId], references: [id])
}

model CleaningTask {
  id                String             @id
  roomId            String
  taskType          CleaningType
  priority          TaskPriority       @default(NORMAL)
  scheduledAt       DateTime
  completedAt       DateTime?
  assignedTo        String?
  status            TaskStatus         @default(PENDING)
  notes             String?
  createdBy         String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime
  CleaningChecklist CleaningChecklist?
  Room              Room               @relation(fields: [roomId], references: [id])
}

model CreditNote {
  id                  String           @id
  creditNoteNumber    String           @unique
  invoiceId           String
  issueDate           DateTime         @default(now())
  reason              String
  subtotal            Decimal          @db.Decimal(10, 2)
  cgstAmount          Decimal          @default(0) @db.Decimal(10, 2)
  sgstAmount          Decimal          @default(0) @db.Decimal(10, 2)
  igstAmount          Decimal          @default(0) @db.Decimal(10, 2)
  totalAmount         Decimal          @db.Decimal(10, 2)
  status              String           @default("ISSUED")
  refundMethod        PaymentMethod?
  refundTransactionId String?
  createdBy           String
  approvedBy          String?
  approvedAt          DateTime?
  reversedBy          String?
  reversedAt          DateTime?
  reversalEntryId     String?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime
  journalEntryId      String?
  TaxInvoice          TaxInvoice       @relation(fields: [invoiceId], references: [id])
  JournalEntry        JournalEntry?    @relation(fields: [journalEntryId], references: [id])
  CreditNoteItem      CreditNoteItem[]
}

model CreditNoteItem {
  id              String      @id
  creditNoteId    String
  invoiceItemType String
  invoiceItemId   String
  description     String
  hsnSacCode      String
  quantity        Int
  unitPrice       Decimal     @db.Decimal(10, 2)
  taxableAmount   Decimal     @db.Decimal(10, 2)
  gstRateType     GSTRateType
  cgstRate        Decimal     @default(0) @db.Decimal(5, 2)
  cgstAmount      Decimal     @default(0) @db.Decimal(10, 2)
  sgstRate        Decimal     @default(0) @db.Decimal(5, 2)
  sgstAmount      Decimal     @default(0) @db.Decimal(10, 2)
  igstRate        Decimal     @default(0) @db.Decimal(5, 2)
  igstAmount      Decimal     @default(0) @db.Decimal(10, 2)
  totalAmount     Decimal     @db.Decimal(10, 2)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime
  CreditNote      CreditNote  @relation(fields: [creditNoteId], references: [id])
}

model CriticalValue {
  id             String    @id
  testId         String
  parameter      String
  value          String
  reportedBy     String
  reportedAt     DateTime  @default(now())
  reportedTo     String
  acknowledgedAt DateTime?
  action         String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime
  Test           Test      @relation(fields: [testId], references: [id])
}

model CylinderInspection {
  id                  String             @id
  cylinderId          String
  inspectionDate      DateTime
  inspectedBy         String
  result              InspectionResult
  certificationNumber String?
  expiryDate          DateTime
  notes               String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime
  MedicalGasCylinder  MedicalGasCylinder @relation(fields: [cylinderId], references: [id])
}

model CylinderRefill {
  id                  String             @id
  cylinderId          String
  refillDate          DateTime
  supplierName        String
  invoiceNumber       String?
  cost                Decimal?
  pressureAfterRefill Float
  performedBy         String
  notes               String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime
  MedicalGasCylinder  MedicalGasCylinder @relation(fields: [cylinderId], references: [id])
}

model CylinderUsageLog {
  id                 String             @id
  cylinderId         String
  startTime          DateTime
  endTime            DateTime?
  startPressure      Float
  endPressure        Float?
  usedBy             String
  usedFor            String
  notes              String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime
  MedicalGasCylinder MedicalGasCylinder @relation(fields: [cylinderId], references: [id])
}

model Department {
  id               String             @id
  name             String             @unique
  description      String?
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  DoctorDepartment DoctorDepartment[]
}

model Designation {
  id           String     @id
  name         String
  description  String?
  departmentId String?
  level        Int?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime
  Employee     Employee[]
}

model DeviceConfiguration {
  id              String          @id
  deviceId        String
  configKey       String
  configValue     String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime
  BiometricDevice BiometricDevice @relation(fields: [deviceId], references: [id])

  @@unique([deviceId, configKey])
}

model Discount {
  id           String       @id
  invoiceId    String
  discountType DiscountType
  amount       Decimal
  percentage   Float?
  reason       String?
  approvedBy   String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime
  Invoice      Invoice      @relation(fields: [invoiceId], references: [id])
}

model Doctor {
  id                                                      String                    @id
  userId                                                  String                    @unique
  licenseNumber                                           String                    @unique
  specialization                                          String
  department                                              String?
  qualification                                           String
  experience                                              Int
  consultationFee                                         Decimal                   @default(0)
  availableFrom                                           String?
  availableTo                                             String?
  availableDays                                           Int[]
  maxAppointmentsPerDay                                   Int                       @default(20)
  isAvailableForOnline                                    Boolean                   @default(false)
  about                                                   String?
  createdAt                                               DateTime                  @default(now())
  updatedAt                                               DateTime
  appointmentCompletionRate                               Float?
  averageAppointmentDuration                              Int?
  billingRate                                             Decimal                   @default(0)
  certifications                                          String[]
  isAcceptingNewPatients                                  Boolean                   @default(true)
  languages                                               String[]
  maxPatientsPerDay                                       Int                       @default(0)
  preferredWorkingHours                                   Json?
  rating                                                  Float?
  referralCount                                           Int                       @default(0)
  specialtyFocus                                          String[]
  totalAppointments                                       Int                       @default(0)
  totalPatients                                           Int                       @default(0)
  vacationAllowance                                       Int                       @default(20)
  vacationDays                                            Int                       @default(0)
  User                                                    User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  DoctorAvailability                                      DoctorAvailability[]
  DoctorCoConsultation                                    DoctorCoConsultation[]
  DoctorDepartment                                        DoctorDepartment[]
  DoctorPerformanceMetric                                 DoctorPerformanceMetric[]
  DoctorReferral_DoctorReferral_receivingDoctorIdToDoctor DoctorReferral[]          @relation("DoctorReferral_receivingDoctorIdToDoctor")
  DoctorReferral_DoctorReferral_referringDoctorIdToDoctor DoctorReferral[]          @relation("DoctorReferral_referringDoctorIdToDoctor")
  DoctorSpeciality                                        DoctorSpeciality[]
  PatientAssignment                                       PatientAssignment[]
  Prescription                                            Prescription[]
}

model DoctorAvailability {
  id           String    @id
  doctorId     String
  dayOfWeek    Int
  startTime    String
  endTime      String
  isRecurring  Boolean   @default(true)
  date         DateTime?
  isAvailable  Boolean   @default(true)
  slotDuration Int       @default(30)
  maxPatients  Int       @default(0)
  notes        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime
  Doctor       Doctor    @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@unique([doctorId, dayOfWeek, startTime, date])
}

model DoctorCoConsultation {
  id            String   @id
  appointmentId String
  doctorId      String
  role          String
  notes         String?
  billingAmount Decimal  @default(0)
  duration      Int?
  createdBy     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  Doctor        Doctor   @relation(fields: [doctorId], references: [id])

  @@unique([appointmentId, doctorId])
}

model DoctorDepartment {
  id           String     @id
  doctorId     String
  departmentId String
  isPrimary    Boolean    @default(false)
  createdAt    DateTime   @default(now())
  Department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  Doctor       Doctor     @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@unique([doctorId, departmentId])
}

model DoctorPerformanceMetric {
  id                    String   @id
  doctorId              String
  period                String
  startDate             DateTime
  endDate               DateTime
  totalAppointments     Int      @default(0)
  completedAppointments Int      @default(0)
  cancelledAppointments Int      @default(0)
  noShowAppointments    Int      @default(0)
  averageRating         Float?
  averageDuration       Int?
  patientSatisfaction   Float?
  revenueGenerated      Decimal  @default(0)
  referralsReceived     Int      @default(0)
  referralsMade         Int      @default(0)
  notes                 String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime
  Doctor                Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@unique([doctorId, period, startDate])
}

model DoctorReferral {
  id                                              String           @id
  patientId                                       String
  referringDoctorId                               String
  receivingDoctorId                               String
  reason                                          String
  notes                                           String?
  priority                                        ReferralPriority @default(NORMAL)
  status                                          ReferralStatus   @default(PENDING)
  appointmentId                                   String?
  createdAt                                       DateTime         @default(now())
  updatedAt                                       DateTime
  Doctor_DoctorReferral_receivingDoctorIdToDoctor Doctor           @relation("DoctorReferral_receivingDoctorIdToDoctor", fields: [receivingDoctorId], references: [id])
  Doctor_DoctorReferral_referringDoctorIdToDoctor Doctor           @relation("DoctorReferral_referringDoctorIdToDoctor", fields: [referringDoctorId], references: [id])
}

model DoctorSpeciality {
  id           String     @id
  doctorId     String
  specialityId String
  isPrimary    Boolean    @default(false)
  createdAt    DateTime   @default(now())
  Doctor       Doctor     @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  Speciality   Speciality @relation(fields: [specialityId], references: [id], onDelete: Cascade)

  @@unique([doctorId, specialityId])
}

model DutyPreference {
  id                 String   @id
  userId             String
  preferredShifts    String[]
  preferredDays      Int[]
  maxConsecutiveDays Int      @default(5)
  minRestHours       Int      @default(12)
  notes              String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime
}

model EligibilityCheck {
  id                 String        @id
  patientPolicyId    String
  serviceType        String
  checkDate          DateTime      @default(now())
  isEligible         Boolean
  coveragePercentage Float?
  coverageAmount     Decimal?
  remainingBenefit   Decimal?
  notes              String?
  checkedBy          String
  createdAt          DateTime      @default(now())
  updatedAt          DateTime
  PatientPolicy      PatientPolicy @relation(fields: [patientPolicyId], references: [id])
}

model EmergencyContact {
  id             String   @id
  employeeId     String
  name           String
  relationship   String
  phone          String
  alternatePhone String?
  email          String?
  address        String?
  isPrimary      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  Employee       Employee @relation(fields: [employeeId], references: [id])
}

model Employee {
  id                 String               @id
  userId             String               @unique
  employeeId         String               @unique
  departmentId       String?
  designationId      String
  joiningDate        DateTime
  probationEndDate   DateTime?
  confirmationDate   DateTime?
  resignationDate    DateTime?
  terminationDate    DateTime?
  status             EmployeeStatus       @default(ACTIVE)
  employmentType     EmploymentType       @default(FULL_TIME)
  reportingTo        String?
  workLocation       String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  EmergencyContact   EmergencyContact[]
  Designation        Designation          @relation(fields: [designationId], references: [id])
  EmployeeAppraisal  EmployeeAppraisal[]
  EmployeeDocument   EmployeeDocument[]
  EmployeeEducation  EmployeeEducation[]
  EmployeeExperience EmployeeExperience[]
  EmployeeTraining   EmployeeTraining[]
  EmploymentContract EmploymentContract[]
  LeaveRequest       LeaveRequest[]
  SalaryDetail       SalaryDetail[]
}

model EmployeeAppraisal {
  id                 String          @id
  employeeId         String
  appraisalPeriod    String
  reviewerId         String
  reviewDate         DateTime
  performanceRating  Float
  strengths          String?
  areasOfImprovement String?
  goals              String?
  comments           String?
  employeeComments   String?
  status             AppraisalStatus @default(DRAFT)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime
  Employee           Employee        @relation(fields: [employeeId], references: [id])
}

model EmployeeDocument {
  id           String    @id
  employeeId   String
  documentType String
  title        String
  description  String?
  filePath     String
  fileType     String
  isVerified   Boolean   @default(false)
  verifiedBy   String?
  verifiedAt   DateTime?
  expiryDate   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime
  Employee     Employee  @relation(fields: [employeeId], references: [id])
}

model EmployeeEducation {
  id           String    @id
  employeeId   String
  institution  String
  degree       String
  fieldOfStudy String
  startDate    DateTime
  endDate      DateTime?
  grade        String?
  activities   String?
  description  String?
  isVerified   Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime
  Employee     Employee  @relation(fields: [employeeId], references: [id])
}

model EmployeeExperience {
  id          String    @id
  employeeId  String
  company     String
  position    String
  location    String?
  startDate   DateTime
  endDate     DateTime?
  description String?
  isVerified  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  Employee    Employee  @relation(fields: [employeeId], references: [id])
}

model EmployeeTraining {
  id                String              @id
  employeeId        String
  trainingProgramId String
  status            ParticipationStatus @default(ENROLLED)
  completionDate    DateTime?
  feedback          String?
  rating            Int?
  certificatePath   String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  Employee          Employee            @relation(fields: [employeeId], references: [id])
  TrainingProgram   TrainingProgram     @relation(fields: [trainingProgramId], references: [id])
}

model EmploymentContract {
  id           String         @id
  employeeId   String
  contractType ContractType
  startDate    DateTime
  endDate      DateTime?
  documentPath String?
  terms        String?
  status       ContractStatus @default(ACTIVE)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  Employee     Employee       @relation(fields: [employeeId], references: [id])
}

model Equipment {
  id                String              @id
  name              String
  serialNumber      String              @unique
  model             String?
  manufacturer      String
  categoryId        String
  purchaseDate      DateTime
  purchasePrice     Decimal
  warrantyExpiry    DateTime?
  location          String
  status            EquipmentStatus     @default(AVAILABLE)
  specifications    Json?
  notes             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  EquipmentCategory EquipmentCategory   @relation(fields: [categoryId], references: [id])
  EquipmentUsage    EquipmentUsage[]
  MaintenanceRecord MaintenanceRecord[]
  WarrantyInfo      WarrantyInfo?
}

model EquipmentCalibration {
  id                 String            @id
  equipmentId        String
  calibratedBy       String
  calibratedAt       DateTime
  result             CalibrationResult
  notes              String?
  nextCalibrationDue DateTime
  certificateNumber  String?
  certificatePath    String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime
  LabEquipment       LabEquipment      @relation(fields: [equipmentId], references: [id])
}

model EquipmentCategory {
  id                      String              @id
  name                    String              @unique
  description             String?
  parentCategoryId        String?
  createdAt               DateTime            @default(now())
  updatedAt               DateTime
  Equipment               Equipment[]
  EquipmentCategory       EquipmentCategory?  @relation("EquipmentCategoryToEquipmentCategory", fields: [parentCategoryId], references: [id])
  other_EquipmentCategory EquipmentCategory[] @relation("EquipmentCategoryToEquipmentCategory")
}

model EquipmentUsage {
  id          String      @id
  equipmentId String
  usedBy      String
  usedFor     String
  startTime   DateTime
  endTime     DateTime?
  status      UsageStatus @default(IN_PROGRESS)
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
  Equipment   Equipment   @relation(fields: [equipmentId], references: [id])
}

model Expense {
  id               String         @id
  expenseNumber    String         @unique
  amount           Decimal
  description      String
  expenseDate      DateTime
  category         String
  paymentMethod    PaymentMethod
  paymentReference String?
  vendorName       String?
  vendorId         String?
  approvedBy       String?
  approvalStatus   ApprovalStatus @default(PENDING)
  receiptPath      String?
  notes            String?
  createdBy        String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime
}

model FamilyMember {
  id                 String   @id
  patientId          String
  name               String
  relationship       String
  contactNumber      String?
  medicalConditions  String?
  isEmergencyContact Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime
  Patient            Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model FinancialTransaction {
  id                String          @id
  transactionNumber String          @unique
  transactionType   TransactionType
  amount            Decimal
  description       String
  referenceId       String?
  referenceType     String?
  date              DateTime        @default(now())
  createdBy         String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime
  LedgerEntry       LedgerEntry[]
}

model FinancialYear {
  id           String              @id
  yearName     String              @unique
  startDate    DateTime
  endDate      DateTime
  status       FinancialYearStatus @default(ACTIVE)
  isCurrent    Boolean             @default(false)
  closedBy     String?
  closedAt     DateTime?
  createdBy    String
  createdAt    DateTime            @default(now())
  updatedAt    DateTime
  JournalEntry JournalEntry[]
}

model GSTSettings {
  id                    String   @id
  hospitalGSTIN         String   @unique
  legalName             String
  tradeName             String?
  addressLine1          String
  addressLine2          String?
  city                  String
  state                 String
  postalCode            String
  country               String   @default("India")
  email                 String
  phone                 String
  panNumber             String
  gstRegistrationDate   DateTime
  returnFilingFrequency String   @default("MONTHLY")
  isActive              Boolean  @default(true)
  createdBy             String
  updatedBy             String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime
}

model HSNSACCode {
  id          String      @id
  code        String      @unique
  description String
  type        String
  gstRateType GSTRateType
  cgstRate    Decimal     @default(0) @db.Decimal(5, 2)
  sgstRate    Decimal     @default(0) @db.Decimal(5, 2)
  igstRate    Decimal     @default(0) @db.Decimal(5, 2)
  isActive    Boolean     @default(true)
  createdBy   String
  updatedBy   String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
}

model Holiday {
  id            String   @id
  name          String
  date          DateTime
  description   String?
  isRecurring   Boolean  @default(false)
  recurringRule String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime
}

model HousekeepingComplaint {
  id             String            @id
  complaintType  String
  description    String
  roomId         String?
  location       String?
  reportedBy     String
  reportedAt     DateTime          @default(now())
  priority       ComplaintPriority @default(MEDIUM)
  status         ComplaintStatus   @default(OPEN)
  assignedTo     String?
  assignedAt     DateTime?
  resolvedBy     String?
  resolvedAt     DateTime?
  resolution     String?
  feedback       String?
  feedbackRating Int?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime
}

model HousekeepingInventory {
  id                   String                 @id
  name                 String
  category             String
  unit                 String
  currentStock         Int
  minimumStock         Int
  reorderLevel         Int
  location             String?
  isActive             Boolean                @default(true)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  InventoryTransaction InventoryTransaction[]
}

model ImagingImage {
  id            String       @id
  studyId       String
  imageType     String
  filePath      String
  thumbnailPath String?
  sequence      Int
  metadata      Json?
  takenAt       DateTime
  takenBy       String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime
  ImagingStudy  ImagingStudy @relation(fields: [studyId], references: [id])
}

model ImagingReport {
  id             String       @id
  studyId        String       @unique
  findings       String
  impression     String
  recommendation String?
  reportedBy     String
  reportedAt     DateTime     @default(now())
  verifiedBy     String?
  verifiedAt     DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  ImagingStudy   ImagingStudy @relation(fields: [studyId], references: [id])
}

model ImagingStudy {
  id            String         @id
  patientId     String
  studyType     String
  bodyPart      String
  requestedBy   String
  requestedAt   DateTime       @default(now())
  scheduledAt   DateTime?
  performedAt   DateTime?
  status        StudyStatus    @default(REQUESTED)
  priority      TestPriority   @default(ROUTINE)
  notes         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime
  ImagingImage  ImagingImage[]
  ImagingReport ImagingReport?
}

model InsuranceClaim {
  id              String          @id
  claimNumber     String          @unique
  patientId       String
  insuranceId     String
  invoiceId       String?
  dateOfService   DateTime
  submissionDate  DateTime        @default(now())
  claimAmount     Decimal
  approvedAmount  Decimal?
  status          ClaimStatus     @default(SUBMITTED)
  rejectionReason String?
  notes           String?
  createdBy       String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime
  ClaimDocument   ClaimDocument[]
}

model InsurancePolicy {
  id              String           @id
  tpaId           String
  policyNumber    String           @unique
  policyName      String
  policyType      PolicyType
  coverageDetails String
  startDate       DateTime
  endDate         DateTime
  status          PolicyStatus     @default(ACTIVE)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime
  TPAOrganization TPAOrganization  @relation(fields: [tpaId], references: [id])
  PatientPolicy   PatientPolicy[]
  PolicyCoverage  PolicyCoverage[]
}

model InventoryTransaction {
  id                    String                   @id
  inventoryId           String
  transactionType       InventoryTransactionType
  quantity              Int
  previousStock         Int
  currentStock          Int
  unitPrice             Decimal?
  totalPrice            Decimal?
  reference             String?
  transactedBy          String
  transactedAt          DateTime                 @default(now())
  notes                 String?
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime
  HousekeepingInventory HousekeepingInventory    @relation(fields: [inventoryId], references: [id])
}

model Invoice {
  id             String        @id
  invoiceNumber  String        @unique
  patientId      String
  issuedDate     DateTime      @default(now())
  dueDate        DateTime
  totalAmount    Decimal
  discountAmount Decimal       @default(0)
  taxAmount      Decimal       @default(0)
  paidAmount     Decimal       @default(0)
  status         InvoiceStatus @default(PENDING)
  notes          String?
  createdBy      String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  Discount       Discount[]
  InvoiceItem    InvoiceItem[]
  Payment        Payment[]
}

model InvoiceItem {
  id          String   @id
  invoiceId   String
  itemType    String
  itemId      String
  description String
  quantity    Int
  unitPrice   Decimal
  discount    Decimal  @default(0)
  tax         Decimal  @default(0)
  totalAmount Decimal
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  Invoice     Invoice  @relation(fields: [invoiceId], references: [id])
}

model JournalEntry {
  id                String             @id
  entryNumber       String             @unique
  entryDate         DateTime           @default(now())
  financialYearId   String
  reference         String?
  referenceType     String?
  description       String
  totalDebit        Decimal            @db.Decimal(15, 2)
  totalCredit       Decimal            @db.Decimal(15, 2)
  status            JournalEntryStatus @default(DRAFT)
  isRecurring       Boolean            @default(false)
  recurringInterval String?
  nextRecurringDate DateTime?
  createdBy         String
  approvedBy        String?
  approvedAt        DateTime?
  reversedBy        String?
  reversedAt        DateTime?
  reversalEntryId   String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime
  CreditNote        CreditNote[]
  FinancialYear     FinancialYear      @relation(fields: [financialYearId], references: [id])
  JournalEntryItem  JournalEntryItem[]
  TaxInvoice        TaxInvoice[]
}

model JournalEntryItem {
  id             String         @id
  journalEntryId String
  accountId      String
  description    String?
  debitAmount    Decimal        @default(0) @db.Decimal(15, 2)
  creditAmount   Decimal        @default(0) @db.Decimal(15, 2)
  departmentId   String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime
  ChartOfAccount ChartOfAccount @relation(fields: [accountId], references: [id])
  JournalEntry   JournalEntry   @relation(fields: [journalEntryId], references: [id])
}

model LabEquipment {
  id                   String                 @id
  name                 String
  model                String
  serialNumber         String                 @unique
  manufacturer         String
  location             String
  purchaseDate         DateTime
  lastCalibration      DateTime?
  nextCalibration      DateTime?
  status               EquipmentStatus        @default(AVAILABLE)
  notes                String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  EquipmentCalibration EquipmentCalibration[]
}

model LeaveRequest {
  id              String      @id
  employeeId      String
  leaveTypeId     String
  startDate       DateTime
  endDate         DateTime
  totalDays       Float
  reason          String
  status          LeaveStatus @default(PENDING)
  approvedBy      String?
  approvedAt      DateTime?
  rejectionReason String?
  attachmentPath  String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime
  Employee        Employee    @relation(fields: [employeeId], references: [id])
  LeaveType       LeaveType   @relation(fields: [leaveTypeId], references: [id])
}

model LeaveType {
  id              String         @id
  name            String
  description     String?
  allowedDays     Int
  isPaid          Boolean        @default(true)
  carryForward    Boolean        @default(false)
  maxCarryForward Int            @default(0)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime
  LeaveRequest    LeaveRequest[]
}

model LedgerEntry {
  id                   String               @id
  transactionId        String
  accountId            String
  amount               Decimal
  isDebit              Boolean
  description          String?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime
  FinancialTransaction FinancialTransaction @relation(fields: [transactionId], references: [id])
}

model LinenInventory {
  id                String             @id
  itemType          String
  totalQuantity     Int
  inUseQuantity     Int                @default(0)
  inLaundryQuantity Int                @default(0)
  availableQuantity Int
  lastStockTake     DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime
  LinenTransaction  LinenTransaction[]
}

model LinenTransaction {
  id              String               @id
  linenId         String
  transactionType LinenTransactionType
  quantity        Int
  roomId          String?
  handledBy       String
  transactedAt    DateTime             @default(now())
  notes           String?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime
  LinenInventory  LinenInventory       @relation(fields: [linenId], references: [id])
}

model MaintenanceRecord {
  id              String            @id
  equipmentId     String
  maintenanceType MaintenanceType
  scheduledDate   DateTime
  completedDate   DateTime?
  technicianId    String?
  cost            Decimal?
  description     String
  status          MaintenanceStatus @default(SCHEDULED)
  notes           String?
  partsReplaced   String[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  Equipment       Equipment         @relation(fields: [equipmentId], references: [id])
}

model MaintenanceSchedule {
  id              String               @id
  title           String
  description     String?
  frequency       MaintenanceFrequency
  interval        Int
  nextDueDate     DateTime
  assignedTo      String?
  priority        MaintenancePriority  @default(MEDIUM)
  status          ScheduleStatus       @default(ACTIVE)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime
  MaintenanceTask MaintenanceTask[]
}

model MaintenanceTask {
  id                  String              @id
  scheduleId          String
  title               String
  description         String?
  estimatedDuration   Int?
  assignedTo          String?
  status              TaskStatus          @default(PENDING)
  startDate           DateTime?
  completedDate       DateTime?
  notes               String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime
  MaintenanceSchedule MaintenanceSchedule @relation(fields: [scheduleId], references: [id])
  TaskPart            TaskPart[]
}

model MedicalGasCylinder {
  id                 String               @id
  cylinderNumber     String               @unique
  gasType            GasType
  capacity           Float
  currentPressure    Float?
  manufacturer       String
  manufactureDate    DateTime
  lastInspectionDate DateTime
  nextInspectionDate DateTime
  location           String
  status             CylinderStatus       @default(FULL)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  CylinderInspection CylinderInspection[]
  CylinderRefill     CylinderRefill[]
  CylinderUsageLog   CylinderUsageLog[]
}

model MedicalHistory {
  id                    String                  @id
  patientId             String                  @unique
  chronicConditions     String[]
  pastSurgeries         String[]
  currentMedications    String[]
  familyHistory         String?
  lifestyle             String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  Patient               Patient                 @relation(fields: [patientId], references: [id], onDelete: Cascade)
  MedicalHistoryVersion MedicalHistoryVersion[]
}

model MedicalHistoryVersion {
  id                 String         @id
  medicalHistoryId   String
  chronicConditions  String[]
  pastSurgeries      String[]
  currentMedications String[]
  familyHistory      String?
  lifestyle          String?
  changedBy          String
  changeReason       String?
  versionNumber      Int
  createdAt          DateTime       @default(now())
  MedicalHistory     MedicalHistory @relation(fields: [medicalHistoryId], references: [id], onDelete: Cascade)
}

model MedicationDispensation {
  id             String       @id
  prescriptionId String
  dispensedBy    String
  dispensedAt    DateTime     @default(now())
  notes          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  Prescription   Prescription @relation(fields: [prescriptionId], references: [id])
}

model MedicationReminder {
  id                 String                       @id
  scheduleId         String
  scheduledTime      DateTime
  sentTime           DateTime?
  status             MedicationReminderStatus     @default(PENDING)
  channel            ReminderChannel
  content            String?
  confirmationTime   DateTime?
  confirmationStatus MedicationConfirmationStatus @default(PENDING)
  createdAt          DateTime                     @default(now())
  updatedAt          DateTime
  MedicationSchedule MedicationSchedule           @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
}

model MedicationSchedule {
  id                 String               @id
  prescriptionId     String
  startDate          DateTime
  endDate            DateTime?
  timeOfDay          String[]
  daysOfWeek         Int[]
  instructions       String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  MedicationReminder MedicationReminder[]
  Prescription       Prescription         @relation(fields: [prescriptionId], references: [id], onDelete: Cascade)
}

model Medicine {
  id                     String                   @id
  name                   String
  genericName            String
  brandName              String?
  manufacturer           String
  description            String?
  dosageForm             String
  strength               String
  therapeuticCategory    String?
  prescriptionRequired   Boolean                  @default(true)
  code                   String?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime
  MedicineBatch          MedicineBatch[]
  PrescriptionMedication PrescriptionMedication[]
}

model MedicineBatch {
  id                String      @id
  medicineId        String
  batchNumber       String
  expiryDate        DateTime
  manufacturingDate DateTime
  quantity          Int
  unitPrice         Decimal
  sellingPrice      Decimal
  supplier          String
  receivedDate      DateTime
  receivedBy        String
  location          String
  status            BatchStatus @default(AVAILABLE)
  notes             String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime
  Medicine          Medicine    @relation(fields: [medicineId], references: [id])
}

model Nurse {
  id            String   @id
  userId        String   @unique
  licenseNumber String   @unique
  department    String
  qualification String
  experience    Int
  shift         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  User          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OnCallSchedule {
  id           String   @id
  departmentId String?
  userId       String
  startTime    DateTime
  endTime      DateTime
  isPrimary    Boolean  @default(true)
  backupUserId String?
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime
}

model PackageItem {
  id               String           @id
  packageId        String
  itemType         String
  itemId           String
  itemName         String
  quantity         Int
  unitPrice        Decimal          @db.Decimal(10, 2)
  totalPrice       Decimal          @db.Decimal(10, 2)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  PackagePriceList PackagePriceList @relation(fields: [packageId], references: [id])
}

model PackagePriceList {
  id            String        @id
  packageName   String
  packageCode   String        @unique
  departmentId  String
  hsnSacCode    String
  basePrice     Decimal       @db.Decimal(10, 2)
  gstRateType   GSTRateType
  description   String
  duration      Int?
  isActive      Boolean       @default(true)
  effectiveFrom DateTime      @default(now())
  effectiveTo   DateTime?
  createdBy     String
  updatedBy     String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  PackageItem   PackageItem[]
}

model PasswordReset {
  id        String   @id
  userId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Patient {
  id                String             @id
  userId            String             @unique
  patientId         String             @unique
  dateOfBirth       DateTime
  gender            String
  bloodGroup        String?
  maritalStatus     String?
  occupation        String?
  nationality       String?
  emergencyContact  String?
  emergencyName     String?
  emergencyRelation String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime
  Allergy           Allergy[]
  FamilyMember      FamilyMember[]
  MedicalHistory    MedicalHistory?
  User              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  PatientConsent    PatientConsent[]
  PatientDocument   PatientDocument[]
  PatientInsurance  PatientInsurance[]
  Prescription      Prescription[]
  TaxInvoice        TaxInvoice[]
  VitalSign         VitalSign[]
}

model PatientAssignment {
  id              String                  @id
  patientId       String
  doctorId        String
  assignmentDate  DateTime                @default(now())
  isPrimaryDoctor Boolean                 @default(false)
  status          PatientAssignmentStatus @default(ACTIVE)
  notes           String?
  lastAppointment DateTime?
  nextAppointment DateTime?
  createdBy       String
  createdAt       DateTime                @default(now())
  updatedAt       DateTime
  Doctor          Doctor                  @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@unique([patientId, doctorId])
}

model PatientConsent {
  id            String    @id
  patientId     String
  consentType   String
  consentText   String
  consentedAt   DateTime  @default(now())
  consentedBy   String
  expiresAt     DateTime?
  revokedAt     DateTime?
  revokedReason String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  Patient       Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model PatientDocument {
  id           String   @id
  patientId    String
  title        String
  description  String?
  fileType     String
  filePath     String
  fileSize     Int
  documentType String
  uploadedBy   String
  uploadedAt   DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  Patient      Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model PatientInsurance {
  id                   String    @id
  patientId            String
  insuranceProvider    String
  policyNumber         String
  groupNumber          String?
  subscriberName       String
  subscriberId         String?
  relationToSubscriber String?
  coverageStartDate    DateTime
  coverageEndDate      DateTime?
  isPrimary            Boolean   @default(false)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime
  Patient              Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model PatientPolicy {
  id                   String             @id
  patientId            String
  policyId             String
  membershipNumber     String
  relationToSubscriber String?
  startDate            DateTime
  endDate              DateTime
  status               PolicyStatus       @default(ACTIVE)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime
  EligibilityCheck     EligibilityCheck[]
  InsurancePolicy      InsurancePolicy    @relation(fields: [policyId], references: [id])
  PreAuthorization     PreAuthorization[]
  TPAClaim             TPAClaim[]
}

model PatientVital {
  id                     String            @id
  dispatchId             String
  temperature            Float?
  bloodPressureSystolic  Int?
  bloodPressureDiastolic Int?
  heartRate              Int?
  respiratoryRate        Int?
  oxygenSaturation       Float?
  glucoseLevel           Float?
  consciousness          String?
  recordedAt             DateTime          @default(now())
  recordedBy             String
  notes                  String?
  createdAt              DateTime          @default(now())
  updatedAt              DateTime
  AmbulanceDispatch      AmbulanceDispatch @relation(fields: [dispatchId], references: [id])
}

model Payment {
  id             String        @id
  invoiceId      String
  amount         Decimal
  paymentDate    DateTime      @default(now())
  paymentMethod  PaymentMethod
  transactionId  String?
  receiptNumber  String        @unique
  notes          String?
  status         PaymentStatus @default(COMPLETED)
  refundedAmount Decimal       @default(0)
  refundDate     DateTime?
  refundReason   String?
  createdBy      String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  Invoice        Invoice       @relation(fields: [invoiceId], references: [id])
}

model Payslip {
  id             String        @id
  salaryDetailId String
  payPeriodStart DateTime
  payPeriodEnd   DateTime
  paymentDate    DateTime
  basicSalary    Decimal
  allowances     Json?
  deductions     Json?
  taxAmount      Decimal
  netAmount      Decimal
  status         PayslipStatus @default(DRAFT)
  documentPath   String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  SalaryDetail   SalaryDetail  @relation(fields: [salaryDetailId], references: [id])
}

model Permission {
  id          String   @id
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

model PestControl {
  id              String    @id
  serviceType     String
  serviceProvider String
  scheduledDate   DateTime
  completedDate   DateTime?
  areas           String[]
  chemicals       String?
  effectiveness   Int?
  nextServiceDate DateTime?
  cost            Decimal?
  invoiceNumber   String?
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime
}

model PolicyCoverage {
  id                 String          @id
  policyId           String
  serviceType        String
  coveragePercentage Float
  coverageAmount     Decimal?
  annualLimit        Decimal?
  lifetimeLimit      Decimal?
  waitingPeriod      Int?
  exclusions         String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime
  InsurancePolicy    InsurancePolicy @relation(fields: [policyId], references: [id])
}

model PreAuthorization {
  id                    String                  @id
  patientPolicyId       String
  tpaId                 String
  authorizationNumber   String                  @unique
  requestDate           DateTime                @default(now())
  serviceType           String
  diagnosis             String?
  procedureCode         String?
  estimatedCost         Decimal
  approvedAmount        Decimal?
  status                AuthorizationStatus     @default(PENDING)
  validFrom             DateTime?
  validTo               DateTime?
  rejectionReason       String?
  notes                 String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  AuthorizationDocument AuthorizationDocument[]
  PatientPolicy         PatientPolicy           @relation(fields: [patientPolicyId], references: [id])
  TPAOrganization       TPAOrganization         @relation(fields: [tpaId], references: [id])
}

model Prescription {
  id                     String                   @id
  prescriptionNumber     String                   @unique
  patientId              String
  doctorId               String
  prescribedDate         DateTime
  startDate              DateTime
  endDate                DateTime?
  status                 PrescriptionStatus       @default(ACTIVE)
  instructions           String?
  diagnosis              String?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime
  MedicationDispensation MedicationDispensation[]
  MedicationSchedule     MedicationSchedule[]
  Doctor                 Doctor                   @relation(fields: [doctorId], references: [id])
  Patient                Patient                  @relation(fields: [patientId], references: [id])
  PrescriptionMedication PrescriptionMedication[]
}

model PrescriptionMedication {
  id             String       @id
  prescriptionId String
  medicationId   String
  dosage         String
  frequency      String
  duration       String?
  route          String
  instructions   String?
  quantity       Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  Medicine       Medicine     @relation(fields: [medicationId], references: [id])
  Prescription   Prescription @relation(fields: [prescriptionId], references: [id], onDelete: Cascade)
}

model Profile {
  id               String    @id
  userId           String    @unique
  address          String?
  city             String?
  state            String?
  country          String?
  postalCode       String?
  bio              String?
  avatar           String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime
  bloodGroup       String?
  dateOfBirth      DateTime?
  emergencyContact String?
  experience       String?
  gender           String?
  languages        String[]
  qualifications   String?
  specialization   String?
  User             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RadiologistAssignment {
  id               String         @id
  radiologistId    String
  modalityTypes    ModalityType[]
  isOnCall         Boolean        @default(false)
  startTime        DateTime
  endTime          DateTime
  maxStudiesPerDay Int            @default(20)
  currentLoad      Int            @default(0)
  notes            String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime
}

model RadiologyAnalytics {
  id                     String   @id
  period                 String
  startDate              DateTime
  endDate                DateTime
  totalStudies           Int      @default(0)
  studiesByModality      Json?
  studiesByStatus        Json?
  studiesByBodyPart      Json?
  averageReportTime      Int?
  averageWaitTime        Int?
  radiologistPerformance Json?
  revenueGenerated       Decimal  @default(0)
  createdAt              DateTime @default(now())
  updatedAt              DateTime
}

model RadiologyBilling {
  id                         String                 @id
  requestId                  String                 @unique
  invoiceNumber              String                 @unique
  baseAmount                 Decimal
  contrastAmount             Decimal                @default(0)
  additionalFees             Decimal                @default(0)
  discount                   Decimal                @default(0)
  tax                        Decimal                @default(0)
  totalAmount                Decimal
  paymentStatus              RadiologyPaymentStatus @default(PENDING)
  paymentMethod              String?
  paymentDate                DateTime?
  insuranceCovered           Boolean                @default(false)
  insuranceProvider          String?
  insurancePolicyNumber      String?
  insuranceAuthorizationCode String?
  insuranceAmount            Decimal                @default(0)
  patientResponsibility      Decimal                @default(0)
  notes                      String?
  createdAt                  DateTime               @default(now())
  updatedAt                  DateTime
  RadiologyRequest           RadiologyRequest       @relation(fields: [requestId], references: [id])
}

model RadiologyInstance {
  id                String          @id
  seriesId          String
  sopInstanceUID    String          @unique
  sopClassUID       String
  instanceNumber    Int
  imageType         String
  filePath          String
  thumbnailPath     String?
  transferSyntaxUID String?
  rows              Int?
  columns           Int?
  bitsAllocated     Int?
  windowCenter      Float?
  windowWidth       Float?
  metadata          Json?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime
  RadiologySeries   RadiologySeries @relation(fields: [seriesId], references: [id])
}

model RadiologyReport {
  id                           String         @id
  studyId                      String         @unique
  findings                     String
  impression                   String
  recommendation               String?
  diagnosisCode                String?
  radiologistId                String
  reportStatus                 ReportStatus   @default(DRAFT)
  reportedAt                   DateTime       @default(now())
  verifiedBy                   String?
  verifiedAt                   DateTime?
  signatureImage               String?
  templateUsed                 String?
  keyImages                    String[]
  criticalResult               Boolean        @default(false)
  criticalResultCommunicatedTo String?
  criticalResultCommunicatedAt DateTime?
  createdAt                    DateTime       @default(now())
  updatedAt                    DateTime
  RadiologyStudy               RadiologyStudy @relation(fields: [studyId], references: [id])
}

model RadiologyRequest {
  id                      String                  @id
  patientId               String
  doctorId                String
  serviceCatalogId        String
  requestedAt             DateTime                @default(now())
  scheduledAt             DateTime?
  priority                RequestPriority         @default(ROUTINE)
  status                  RadiologyStatus         @default(REQUESTED)
  clinicalInfo            String?
  allergies               String?
  previousExams           String?
  notes                   String?
  reasonForExam           String
  isPregnant              Boolean?
  weight                  Float?
  height                  Float?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime
  RadiologyBilling        RadiologyBilling?
  RadiologyServiceCatalog RadiologyServiceCatalog @relation(fields: [serviceCatalogId], references: [id])
  RadiologyStudy          RadiologyStudy?
}

model RadiologySeries {
  id                String              @id
  studyId           String
  seriesInstanceUID String              @unique
  seriesNumber      Int
  seriesDescription String?
  modality          ModalityType
  bodyPartExamined  String?
  patientPosition   String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  RadiologyInstance RadiologyInstance[]
  RadiologyStudy    RadiologyStudy      @relation(fields: [studyId], references: [id])
}

model RadiologyServiceCatalog {
  id                      String             @id
  name                    String
  description             String?
  modalityType            ModalityType
  price                   Decimal
  duration                Int
  preparationInstructions String?
  active                  Boolean            @default(true)
  createdAt               DateTime           @default(now())
  updatedAt               DateTime
  RadiologyRequest        RadiologyRequest[]
}

model RadiologyStudy {
  id               String            @id
  requestId        String            @unique
  studyInstanceUID String            @unique
  studyDate        DateTime
  studyDescription String?
  accessionNumber  String            @unique
  performedBy      String
  radiologistId    String?
  status           RadiologyStatus   @default(IN_PROGRESS)
  patientPosition  String?
  studyNotes       String?
  radiationDose    Float?
  contrastUsed     Boolean           @default(false)
  contrastDetails  String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime
  RadiologyReport  RadiologyReport?
  RadiologySeries  RadiologySeries[]
  RadiologyRequest RadiologyRequest  @relation(fields: [requestId], references: [id])
}

model RecurringPattern {
  id          String        @id
  patternType PatternType
  frequency   Int
  daysOfWeek  Int[]
  monthlyDay  Int?
  startDate   DateTime
  endDate     DateTime?
  occurrences Int?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  Appointment Appointment[]
}

model ReferenceRange {
  id            String      @id
  testCatalogId String
  parameter     String
  gender        String?
  minAge        Int?
  maxAge        Int?
  lowerLimit    String?
  upperLimit    String?
  textualRange  String?
  unit          String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  TestCatalog   TestCatalog @relation(fields: [testCatalogId], references: [id])
}

model Role {
  id          String     @id
  name        String     @unique
  description String?
  permissions Json?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime
  UserRole    UserRole[]
}

model Room {
  id             String           @id
  roomNumber     String           @unique
  floor          Int
  wing           String?
  roomType       RoomType
  capacity       Int              @default(1)
  status         RoomStatus       @default(AVAILABLE)
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  CleaningTask   CleaningTask[]
  RoomInspection RoomInspection[]
}

model RoomInspection {
  id              String           @id
  roomId          String
  inspectionType  InspectionType
  scheduledAt     DateTime
  completedAt     DateTime?
  inspectedBy     String?
  status          InspectionStatus @default(SCHEDULED)
  rating          Int?
  findings        String?
  recommendations String?
  followUpNeeded  Boolean          @default(false)
  followUpDate    DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime
  Room            Room             @relation(fields: [roomId], references: [id])
}

model Roster {
  id               String             @id
  name             String
  departmentId     String?
  startDate        DateTime
  endDate          DateTime
  status           RosterStatus       @default(DRAFT)
  createdBy        String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  RosterShift      RosterShift[]
  ShiftSwapRequest ShiftSwapRequest[]
}

model RosterShift {
  id                                                         String             @id
  rosterId                                                   String
  userId                                                     String
  shiftType                                                  String
  startTime                                                  DateTime
  endTime                                                    DateTime
  isOnCall                                                   Boolean            @default(false)
  notes                                                      String?
  createdAt                                                  DateTime           @default(now())
  updatedAt                                                  DateTime
  Roster                                                     Roster             @relation(fields: [rosterId], references: [id])
  ShiftSwapRequest_ShiftSwapRequest_fromShiftIdToRosterShift ShiftSwapRequest[] @relation("ShiftSwapRequest_fromShiftIdToRosterShift")
  ShiftSwapRequest_ShiftSwapRequest_toShiftIdToRosterShift   ShiftSwapRequest[] @relation("ShiftSwapRequest_toShiftIdToRosterShift")
}

model SalaryDetail {
  id               String           @id
  employeeId       String
  basicSalary      Decimal
  allowances       Json?
  deductions       Json?
  effectiveFrom    DateTime
  effectiveTo      DateTime?
  currency         String           @default("USD")
  paymentFrequency PaymentFrequency @default(MONTHLY)
  bankName         String?
  accountNumber    String?
  taxInformation   String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  Payslip          Payslip[]
  Employee         Employee         @relation(fields: [employeeId], references: [id])
}

model Sample {
  id              String       @id
  testId          String
  sampleType      String
  sampleId        String       @unique
  collectedBy     String
  collectedAt     DateTime
  receivedBy      String?
  receivedAt      DateTime?
  status          SampleStatus @default(COLLECTED)
  rejectionReason String?
  notes           String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime
  Test            Test         @relation(fields: [testId], references: [id])
}

model SchemeBeneficiary {
  id                  String                        @id
  schemeId            String
  patientId           String
  beneficiaryId       String                        @unique
  enrollmentDate      DateTime                      @default(now())
  verificationStatus  BeneficiaryVerificationStatus @default(PENDING)
  verifiedBy          String?
  verifiedAt          DateTime?
  expiryDate          DateTime?
  status              BeneficiaryStatus             @default(ACTIVE)
  notes               String?
  createdAt           DateTime                      @default(now())
  updatedAt           DateTime
  BeneficiaryDocument BeneficiaryDocument[]
  SubsidyScheme       SubsidyScheme                 @relation(fields: [schemeId], references: [id])
  SubsidyClaim        SubsidyClaim[]
}

model SchemeService {
  id                 String         @id
  schemeId           String
  serviceType        String
  serviceName        String
  description        String?
  coveragePercentage Float
  maxCoverageAmount  Decimal?
  annualLimit        Decimal?
  lifetimeLimit      Decimal?
  isActive           Boolean        @default(true)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime
  SubsidyScheme      SubsidyScheme  @relation(fields: [schemeId], references: [id])
  SubsidyClaim       SubsidyClaim[]
}

model ServicePriceList {
  id            String      @id
  serviceName   String
  serviceCode   String      @unique
  departmentId  String
  hsnSacCode    String
  basePrice     Decimal     @db.Decimal(10, 2)
  gstRateType   GSTRateType
  isActive      Boolean     @default(true)
  effectiveFrom DateTime    @default(now())
  effectiveTo   DateTime?
  createdBy     String
  updatedBy     String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
}

model Session {
  id           String   @id
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Shift {
  id              String            @id
  name            String
  startTime       String
  endTime         String
  durationHours   Float
  isNightShift    Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  ShiftAssignment ShiftAssignment[]
}

model ShiftAssignment {
  id               String             @id
  userId           String
  shiftId          String
  startDate        DateTime
  endDate          DateTime?
  isRecurring      Boolean            @default(false)
  recurringDays    Int[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  AttendanceRecord AttendanceRecord[]
  Shift            Shift              @relation(fields: [shiftId], references: [id])
  TimeOffRequest   TimeOffRequest[]
}

model ShiftSwapRequest {
  id                                                    String      @id
  rosterId                                              String
  fromShiftId                                           String
  toShiftId                                             String
  requestedBy                                           String
  requestedAt                                           DateTime    @default(now())
  reason                                                String?
  status                                                SwapStatus  @default(PENDING)
  respondedAt                                           DateTime?
  approvedBy                                            String?
  approvedAt                                            DateTime?
  rejectionReason                                       String?
  createdAt                                             DateTime    @default(now())
  updatedAt                                             DateTime
  RosterShift_ShiftSwapRequest_fromShiftIdToRosterShift RosterShift @relation("ShiftSwapRequest_fromShiftIdToRosterShift", fields: [fromShiftId], references: [id])
  Roster                                                Roster      @relation(fields: [rosterId], references: [id])
  RosterShift_ShiftSwapRequest_toShiftIdToRosterShift   RosterShift @relation("ShiftSwapRequest_toShiftIdToRosterShift", fields: [toShiftId], references: [id])
}

model Speciality {
  id               String             @id
  name             String             @unique
  description      String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  DoctorSpeciality DoctorSpeciality[]
}

model Staff {
  id          String   @id
  userId      String   @unique
  staffType   String
  department  String?
  designation String
  employeeId  String   @unique
  joiningDate DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SubsidyBudget {
  id               String             @id
  fiscalYear       String
  totalBudget      Decimal
  allocatedAmount  Decimal
  utilizedAmount   Decimal            @default(0)
  remainingAmount  Decimal
  startDate        DateTime
  endDate          DateTime
  status           BudgetStatus       @default(ACTIVE)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  BudgetAllocation BudgetAllocation[]
}

model SubsidyClaim {
  id                   String                 @id
  schemeId             String
  beneficiaryId        String
  serviceId            String
  invoiceId            String?
  claimNumber          String                 @unique
  serviceDate          DateTime
  submissionDate       DateTime               @default(now())
  diagnosis            String?
  procedureCode        String?
  claimAmount          Decimal
  approvedAmount       Decimal?
  status               SubsidyClaimStatus     @default(SUBMITTED)
  approvedBy           String?
  approvedAt           DateTime?
  rejectionReason      String?
  paymentDate          DateTime?
  paymentReference     String?
  notes                String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  SchemeBeneficiary    SchemeBeneficiary      @relation(fields: [beneficiaryId], references: [id])
  SubsidyScheme        SubsidyScheme          @relation(fields: [schemeId], references: [id])
  SchemeService        SchemeService          @relation(fields: [serviceId], references: [id])
  SubsidyClaimDocument SubsidyClaimDocument[]
}

model SubsidyClaimDocument {
  id           String       @id
  claimId      String
  documentType String
  title        String
  description  String?
  filePath     String
  fileType     String
  uploadedBy   String
  uploadedAt   DateTime     @default(now())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime
  tPAClaimId   String?
  SubsidyClaim SubsidyClaim @relation(fields: [claimId], references: [id])
  TPAClaim     TPAClaim?    @relation(fields: [tPAClaimId], references: [id])
}

model SubsidyScheme {
  id                    String              @id
  name                  String
  code                  String              @unique
  description           String?
  sponsoredBy           String
  startDate             DateTime
  endDate               DateTime?
  status                SchemeStatus        @default(ACTIVE)
  eligibilityCriteria   String?
  coverageDetails       String?
  documentationRequired String?
  contactPerson         String?
  contactEmail          String?
  contactPhone          String?
  website               String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime
  SchemeBeneficiary     SchemeBeneficiary[]
  SchemeService         SchemeService[]
  SubsidyClaim          SubsidyClaim[]
}

model TPAClaim {
  id                   String                 @id
  patientPolicyId      String
  tpaId                String
  claimNumber          String                 @unique
  invoiceId            String?
  serviceDate          DateTime
  submissionDate       DateTime               @default(now())
  diagnosis            String?
  procedureCode        String?
  claimAmount          Decimal
  approvedAmount       Decimal?
  status               ClaimStatus            @default(SUBMITTED)
  settlementDate       DateTime?
  rejectionReason      String?
  notes                String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  ClaimPayment         ClaimPayment[]
  SubsidyClaimDocument SubsidyClaimDocument[]
  PatientPolicy        PatientPolicy          @relation(fields: [patientPolicyId], references: [id])
  TPAOrganization      TPAOrganization        @relation(fields: [tpaId], references: [id])
}

model TPAOrganization {
  id                String             @id
  name              String
  code              String             @unique
  address           String
  city              String
  state             String
  country           String
  postalCode        String
  contactPerson     String
  contactEmail      String
  contactPhone      String
  website           String?
  status            TPAStatus          @default(ACTIVE)
  contractStartDate DateTime
  contractEndDate   DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime
  InsurancePolicy   InsurancePolicy[]
  PreAuthorization  PreAuthorization[]
  TPAClaim          TPAClaim[]
}

model TaskPart {
  id              String          @id
  taskId          String
  partName        String
  partNumber      String?
  quantity        Int
  cost            Decimal?
  replaced        Boolean         @default(false)
  notes           String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime
  MaintenanceTask MaintenanceTask @relation(fields: [taskId], references: [id])
}

model TaxInvoice {
  id                 String         @id
  invoiceNumber      String         @unique
  patientId          String
  invoiceDate        DateTime       @default(now())
  dueDate            DateTime
  status             InvoiceStatus  @default(PENDING)
  subtotal           Decimal        @db.Decimal(10, 2)
  discountAmount     Decimal        @default(0) @db.Decimal(10, 2)
  taxableAmount      Decimal        @db.Decimal(10, 2)
  cgstAmount         Decimal        @default(0) @db.Decimal(10, 2)
  sgstAmount         Decimal        @default(0) @db.Decimal(10, 2)
  igstAmount         Decimal        @default(0) @db.Decimal(10, 2)
  totalAmount        Decimal        @db.Decimal(10, 2)
  paidAmount         Decimal        @default(0) @db.Decimal(10, 2)
  balanceAmount      Decimal        @db.Decimal(10, 2)
  notes              String?
  termsAndConditions String?
  createdBy          String
  updatedBy          String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime
  isGSTRegistered    Boolean        @default(true)
  customerGSTIN      String?
  placeOfSupply      String
  hospitalGSTIN      String
  CreditNote         CreditNote[]
  Patient            Patient        @relation(fields: [patientId], references: [id])
  JournalEntry       JournalEntry[]
}

model Test {
  id            String          @id
  testCatalogId String
  patientId     String
  requestedBy   String
  requestedAt   DateTime        @default(now())
  scheduledAt   DateTime?
  status        TestStatus      @default(REQUESTED)
  priority      TestPriority    @default(ROUTINE)
  notes         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  CriticalValue CriticalValue[]
  Sample        Sample[]
  TestCatalog   TestCatalog     @relation(fields: [testCatalogId], references: [id])
  TestResult    TestResult[]
}

model TestCatalog {
  id             String           @id
  name           String
  code           String           @unique
  category       TestCategory
  description    String?
  price          Decimal
  duration       Int?
  preparation    String?
  sampleRequired Boolean          @default(true)
  sampleType     String?
  reportTemplate String?
  department     String
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  ReferenceRange ReferenceRange[]
  Test           Test[]
}

model TestResult {
  id             String    @id
  testId         String
  parameter      String
  value          String
  unit           String?
  referenceRange String?
  interpretation String?
  isAbnormal     Boolean   @default(false)
  isCritical     Boolean   @default(false)
  performedBy    String
  performedAt    DateTime  @default(now())
  verifiedBy     String?
  verifiedAt     DateTime?
  notes          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime
  Test           Test      @relation(fields: [testId], references: [id])
}

model TimeOffRequest {
  id                String          @id
  userId            String
  shiftAssignmentId String
  startDate         DateTime
  endDate           DateTime
  type              TimeOffType
  reason            String
  status            ApprovalStatus  @default(PENDING)
  approvedBy        String?
  approvedAt        DateTime?
  rejectionReason   String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime
  ShiftAssignment   ShiftAssignment @relation(fields: [shiftAssignmentId], references: [id])
}

model TrainingProgram {
  id               String             @id
  name             String
  description      String?
  trainer          String?
  startDate        DateTime
  endDate          DateTime
  location         String?
  capacity         Int?
  cost             Decimal?
  status           TrainingStatus     @default(PLANNED)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  EmployeeTraining EmployeeTraining[]
}

model TwoFactorAuth {
  id          String   @id
  userId      String   @unique
  secret      String
  enabled     Boolean  @default(false)
  backupCodes String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String          @id
  name           String
  email          String          @unique
  password       String?
  phone          String?
  status         String          @default("active")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime
  emailVerified  DateTime?
  Account        Account[]
  Appointment    Appointment[]
  Doctor         Doctor?
  Nurse          Nurse?
  PasswordReset  PasswordReset[]
  Patient        Patient?
  Profile        Profile?
  Session        Session[]
  Staff          Staff?
  TwoFactorAuth  TwoFactorAuth?
  UserPreference      UserPreference?
  UserRole           UserRole[]
  SentMessages       MessageThread[]     @relation("SentMessages")
  ReceivedMessages   MessageThread[]     @relation("ReceivedMessages")
  MessageMetadata    MessageMetadata[]
  FileAttachment     FileAttachment[]
  UserGroupMember    UserGroupMember[]
  UserStatus         UserStatus?
}

model UserPreference {
  id                 String   @id
  userId             String   @unique
  theme              String   @default("light")
  language           String   @default("en")
  notifications      Boolean  @default(true)
  emailNotifications Boolean  @default(true)
  smsNotifications   Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime
  User               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Firebase Messaging Integration Models

model MessageMetadata {
  id                String           @id
  userId            String
  firebaseMessageId String           @unique
  threadId          String
  isRead            Boolean          @default(false)
  readAt            DateTime?
  deliveredAt       DateTime?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime
  User              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  MessageThread     MessageThread    @relation(fields: [threadId], references: [id], onDelete: Cascade)
  FileAttachment    FileAttachment[]
}

model MessageThread {
  id                String           @id
  subject           String?
  senderId          String
  receiverId        String
  groupId           String?
  isGroupMessage    Boolean          @default(false)
  lastMessageTime   DateTime         @default(now())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime
  Sender            User             @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  Receiver          User             @relation("ReceivedMessages", fields: [receiverId], references: [id])
  MessageGroup      MessageGroup?    @relation(fields: [groupId], references: [id])
  MessageMetadata   MessageMetadata[]
}

model MessageGroup {
  id                String           @id
  name              String
  description       String?
  departmentId      String?
  createdBy         String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime
  MessageThread     MessageThread[]
  UserGroupMember   UserGroupMember[]
  Department        Department?      @relation(fields: [departmentId], references: [id])
}

model UserGroupMember {
  id                String           @id
  userId            String
  groupId           String
  isAdmin           Boolean          @default(false)
  joinedAt          DateTime         @default(now())
  updatedAt         DateTime
  User              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  MessageGroup      MessageGroup     @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

model FileAttachment {
  id                String           @id
  messageMetadataId String
  userId            String
  fileName          String
  fileType          String
  fileSize          Int
  firebaseStorageUrl String
  uploadedAt        DateTime         @default(now())
  MessageMetadata   MessageMetadata  @relation(fields: [messageMetadataId], references: [id], onDelete: Cascade)
  User              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserStatus {
  id                String           @id
  userId            String           @unique
  status            UserStatusType   @default(ONLINE)
  customMessage     String?
  lastActive        DateTime         @default(now())
  dutyStartTime     DateTime?
  dutyEndTime       DateTime?
  doNotDisturbUntil DateTime?
  deviceInfo        String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime
  User              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserStatusType {
  ONLINE
  AWAY
  BUSY
  OFFLINE
  IN_MEETING
  ON_BREAK
  CUSTOM
}

model UserRole {
  id         String   @id
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  Role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}

model VitalSign {
  id                     String   @id
  patientId              String
  temperature            Float?
  bloodPressureSystolic  Int?
  bloodPressureDiastolic Int?
  heartRate              Int?
  respiratoryRate        Int?
  oxygenSaturation       Float?
  height                 Float?
  weight                 Float?
  bmi                    Float?
  notes                  String?
  recordedBy             String
  recordedAt             DateTime @default(now())
  createdAt              DateTime @default(now())
  updatedAt              DateTime
  Patient                Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model WaitingList {
  id                String          @id
  appointmentId     String          @unique
  queueNumber       Int
  priority          WaitingPriority @default(NORMAL)
  estimatedWaitTime Int?
  actualWaitTime    Int?
  status            WaitingStatus   @default(WAITING)
  notes             String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime
  Appointment       Appointment     @relation(fields: [appointmentId], references: [id])
}

model WarrantyInfo {
  id                String    @id
  equipmentId       String    @unique
  warrantyProvider  String
  contactInfo       String
  startDate         DateTime
  endDate           DateTime
  terms             String?
  extendable        Boolean   @default(false)
  serviceContractId String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime
  Equipment         Equipment @relation(fields: [equipmentId], references: [id])
}

model WasteManagement {
  id             String    @id
  wasteType      WasteType
  quantity       Float
  unit           String
  disposalMethod String
  collectedFrom  String?
  collectedBy    String
  collectedAt    DateTime  @default(now())
  disposedBy     String?
  disposedAt     DateTime?
  notes          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

enum AmbulanceStatus {
  AVAILABLE
  IN_SERVICE
  UNDER_MAINTENANCE
  OUT_OF_SERVICE
  RESERVED
}

enum AmbulanceType {
  BASIC
  ADVANCED
  MOBILE_ICU
  NEONATAL
  PATIENT_TRANSPORT
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  CHECKED_IN
  IN_PROGRESS
  COMPLETED
  CANCELLED
  RESCHEDULED
  NO_SHOW
}

enum AppraisalStatus {
  DRAFT
  IN_REVIEW
  COMPLETED
  ACKNOWLEDGED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HALF_DAY
  ON_LEAVE
  HOLIDAY
  WEEKEND
}

enum AuthorizationStatus {
  PENDING
  APPROVED
  PARTIALLY_APPROVED
  REJECTED
  CANCELLED
  EXPIRED
}

enum BatchStatus {
  AVAILABLE
  LOW_STOCK
  OUT_OF_STOCK
  EXPIRED
  RECALLED
}

enum BeneficiaryStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  EXPIRED
}

enum BeneficiaryVerificationStatus {
  PENDING
  VERIFIED
  REJECTED
  NEEDS_REVIEW
}

enum BudgetStatus {
  DRAFT
  ACTIVE
  CLOSED
  EXTENDED
}

enum CalibrationResult {
  PASSED
  FAILED
  ADJUSTED
}

enum ClaimStatus {
  DRAFT
  SUBMITTED
  IN_PROCESS
  APPROVED
  PARTIALLY_APPROVED
  REJECTED
  APPEALED
  SETTLED
}

enum CleaningType {
  ROUTINE
  DEEP_CLEANING
  DISCHARGE_CLEANING
  ISOLATION_CLEANING
  SPILL_CLEANUP
  SPECIAL_REQUEST
}

enum ComplaintPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ComplaintStatus {
  OPEN
  ASSIGNED
  IN_PROGRESS
  RESOLVED
  CLOSED
  REOPENED
}

enum ConfirmationStatus {
  PENDING
  CONFIRMED
  DECLINED
}

enum ContractStatus {
  DRAFT
  ACTIVE
  EXPIRED
  TERMINATED
  RENEWED
}

enum ContractType {
  PERMANENT
  FIXED_TERM
  PROBATION
  INTERNSHIP
  CONSULTANT
}

enum CylinderStatus {
  FULL
  IN_USE
  EMPTY
  UNDER_INSPECTION
  DEFECTIVE
}

enum DeviceStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  DISCONNECTED
}

enum DeviceType {
  FINGERPRINT
  FACE_RECOGNITION
  CARD_READER
  MULTI_BIOMETRIC
}

enum Direction {
  IN
  OUT
}

enum DiscountType {
  FIXED
  PERCENTAGE
  SPECIAL
  EMPLOYEE
  SENIOR_CITIZEN
  CHARITY
}

enum DispatchPriority {
  LOW
  NORMAL
  HIGH
  EMERGENCY
}

enum DispatchStatus {
  REQUESTED
  ASSIGNED
  DISPATCHED
  EN_ROUTE_TO_PICKUP
  ARRIVED_AT_PICKUP
  PATIENT_LOADED
  EN_ROUTE_TO_DESTINATION
  ARRIVED_AT_DESTINATION
  COMPLETED
  CANCELLED
}

enum EmployeeStatus {
  ACTIVE
  PROBATION
  ON_LEAVE
  SUSPENDED
  TERMINATED
  RESIGNED
  RETIRED
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  TEMPORARY
  INTERN
  CONSULTANT
}

enum EquipmentStatus {
  AVAILABLE
  IN_USE
  UNDER_MAINTENANCE
  OUT_OF_ORDER
  RETIRED
}

enum FinancialYearStatus {
  ACTIVE
  CLOSED
  LOCKED
}

enum GSTRateType {
  EXEMPT
  ZERO
  FIVE
  TWELVE
  EIGHTEEN
  TWENTYEIGHT
}

enum GasType {
  OXYGEN
  NITROGEN
  NITROUS_OXIDE
  CARBON_DIOXIDE
  HELIUM
  AIR
  MIXED
}

enum InspectionResult {
  PASSED
  FAILED
  CONDITIONAL_PASS
}

enum InspectionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum InspectionType {
  ROUTINE
  QUALITY_CONTROL
  SAFETY
  INFECTION_CONTROL
  POST_MAINTENANCE
  COMPLAINT_BASED
}

enum InventoryTransactionType {
  PURCHASE
  CONSUMPTION
  ADJUSTMENT_ADD
  ADJUSTMENT_SUBTRACT
  RETURN
  TRANSFER
  DAMAGED
  EXPIRED
}

enum InvoiceStatus {
  DRAFT
  PENDING
  PARTIALLY_PAID
  PAID
  OVERDUE
  CANCELLED
  REFUNDED
}

enum JournalEntryStatus {
  DRAFT
  POSTED
  APPROVED
  REJECTED
  REVERSED
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum LinenTransactionType {
  PURCHASE
  ISSUE_TO_ROOM
  COLLECT_FROM_ROOM
  SEND_TO_LAUNDRY
  RECEIVE_FROM_LAUNDRY
  DISCARD
  STOCK_ADJUSTMENT
}

enum LogType {
  ENTRY
  EXIT
  VERIFICATION
  ENROLLMENT
  DEVICE_STATUS
}

enum MaintenanceFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  SEMI_ANNUALLY
  ANNUALLY
  CUSTOM
}

enum MaintenancePriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  POSTPONED
}

enum MaintenanceType {
  PREVENTIVE
  CORRECTIVE
  CALIBRATION
  INSPECTION
  UPGRADE
}

enum MedicationConfirmationStatus {
  PENDING
  CONFIRMED
  MISSED
  SKIPPED
}

enum MedicationReminderStatus {
  PENDING
  SENT
  FAILED
  CANCELLED
}

enum ModalityType {
  XRAY
  CT
  MRI
  ULTRASOUND
  MAMMOGRAPHY
  FLUOROSCOPY
  DEXA
  PET
  NUCLEAR_MEDICINE
  ANGIOGRAPHY
}

enum ParticipationStatus {
  ENROLLED
  ATTENDING
  COMPLETED
  DROPPED
  NO_SHOW
}

enum PatientAssignmentStatus {
  ACTIVE
  INACTIVE
  TRANSFERRED
  COMPLETED
}

enum PatternType {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum PaymentFrequency {
  WEEKLY
  BI_WEEKLY
  MONTHLY
  QUARTERLY
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  CHEQUE
  ONLINE
  INSURANCE
  MOBILE_PAYMENT
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PayslipStatus {
  DRAFT
  GENERATED
  APPROVED
  PAID
  CANCELLED
}

enum PolicyStatus {
  ACTIVE
  INACTIVE
  EXPIRED
  CANCELLED
}

enum PolicyType {
  INDIVIDUAL
  FAMILY
  GROUP
  CORPORATE
  SENIOR_CITIZEN
  CRITICAL_ILLNESS
}

enum PrescriptionStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  EXPIRED
}

enum RadiologyPaymentStatus {
  PENDING
  PARTIAL
  PAID
  REFUNDED
  CANCELLED
}

enum RadiologyStatus {
  REQUESTED
  SCHEDULED
  CHECKED_IN
  IN_PROGRESS
  COMPLETED
  REPORTED
  VERIFIED
  DELIVERED
  CANCELLED
}

enum ReferralPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum ReferralStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
  CANCELLED
}

enum ReminderChannel {
  EMAIL
  SMS
  PUSH
  WHATSAPP
}

enum ReminderStatus {
  PENDING
  SENT
  FAILED
  CANCELLED
}

enum ReminderType {
  INITIAL
  FOLLOWUP
  CONFIRMATION
  RESCHEDULE
}

enum ReportStatus {
  DRAFT
  PRELIMINARY
  FINAL
  AMENDED
  ADDENDUM
}

enum RequestPriority {
  STAT
  URGENT
  ROUTINE
  ELECTIVE
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  UNDER_CLEANING
  UNDER_MAINTENANCE
  RESERVED
  OUT_OF_SERVICE
}

enum RoomType {
  GENERAL_WARD
  SEMI_PRIVATE
  PRIVATE
  DELUXE
  SUITE
  ICU
  OPERATION_THEATER
  EMERGENCY
  LABOR_ROOM
  CONSULTATION
  LABORATORY
  RADIOLOGY
  PHARMACY
  CAFETERIA
  WAITING_AREA
  OFFICE
}

enum RosterStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum SampleStatus {
  COLLECTED
  IN_TRANSIT
  RECEIVED
  PROCESSING
  ANALYZED
  REJECTED
  DISPOSED
}

enum ScheduleStatus {
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum SchemeStatus {
  DRAFT
  ACTIVE
  INACTIVE
  EXPIRED
}

enum StudyStatus {
  REQUESTED
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  REPORTED
  VERIFIED
  DELIVERED
  CANCELLED
}

enum SubsidyClaimStatus {
  DRAFT
  SUBMITTED
  IN_REVIEW
  APPROVED
  PARTIALLY_APPROVED
  REJECTED
  PAID
  CANCELLED
}

enum SwapStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
  APPROVED
  DENIED
}

enum TPAStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  TERMINATED
}

enum TaskPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  OVERDUE
}

enum TemplateStatus {
  ACTIVE
  INACTIVE
  NEEDS_REENROLLMENT
}

enum TemplateType {
  FINGERPRINT_LEFT_THUMB
  FINGERPRINT_LEFT_INDEX
  FINGERPRINT_RIGHT_THUMB
  FINGERPRINT_RIGHT_INDEX
  FACE
  IRIS
  VOICE
}

enum TestCategory {
  HEMATOLOGY
  BIOCHEMISTRY
  MICROBIOLOGY
  IMMUNOLOGY
  PATHOLOGY
  RADIOLOGY
  CARDIOLOGY
  NEUROLOGY
  OTHER
}

enum TestPriority {
  ROUTINE
  URGENT
  STAT
}

enum TestStatus {
  REQUESTED
  SCHEDULED
  SAMPLE_COLLECTED
  IN_PROGRESS
  COMPLETED
  REPORTED
  VERIFIED
  DELIVERED
  CANCELLED
}

enum TimeOffType {
  VACATION
  SICK
  PERSONAL
  BEREAVEMENT
  MATERNITY
  PATERNITY
  UNPAID
  COMPENSATORY
}

enum TrainingStatus {
  PLANNED
  ONGOING
  COMPLETED
  CANCELLED
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
  ADJUSTMENT
  REFUND
}

enum UsageStatus {
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum VerificationMethod {
  FINGERPRINT
  FACE
  CARD
  PIN
  MANUAL
}

enum VerificationStatus {
  SUCCESS
  FAILED
  MANUAL_OVERRIDE
  EXCEPTION
}

enum WaitingPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum WaitingStatus {
  WAITING
  CALLED
  SERVING
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum WasteType {
  GENERAL
  INFECTIOUS
  SHARPS
  PHARMACEUTICAL
  CHEMICAL
  RADIOACTIVE
  FOOD
  RECYCLABLE
}
